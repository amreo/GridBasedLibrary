<?xml version="1.0"?>
<doc>
<assembly>
<name>
GridBasedLibrary
</name>
</assembly>
<members>
<member name="F:GridBasedLibrary.NullDistanceFunction.DF">
	<summary>
 Ottiene o imposta una istanza di DistanceFunction
 </summary>
</member><member name="P:GridBasedLibrary.NullDistanceFunction.DistanceFunction">
	<summary>
 Ottiene la funzione per il calcolo della distanza
 </summary>
	<value>La funzione per il calcolo della distanza</value>
	<returns>La funzione per il calcolo della distanza</returns>
</member><member name="M:GridBasedLibrary.NullDistanceFunction.#ctor">
	<summary>
 Crea una nuova istanza di DiagonalDistanceFunction
 </summary>
</member><member name="M:GridBasedLibrary.NullDistanceFunction.GetDistance(System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
	<summary>
 Calcola la distanza tra 1 e 2
 </summary>
	<param name="x1">Cordinata x del punto 1</param>
	<param name="y1">Cordinata y del punto 1</param>
	<param name="x2">Cordinata x del punto 2</param>
	<param name="y2">Cordinata y del punto 2</param>
	<param name="scale">Valore di scala</param>
	<returns>Un valore che indica la distanza (euristica) tra punto 1 e 2</returns>
</member><member name="M:GridBasedLibrary.NullDistanceFunction.GetDistance(GridBasedLibrary.ILocated,GridBasedLibrary.ILocated,System.Single)">
	<summary>
 Calcola la distanza tra 1 e 2
 </summary>
	<param name="c1">Cordinata 1</param>
	<param name="c2">Cordinata 2</param>
	<param name="scale">Valore di scala</param>
	<returns>Un valore che indica la distanza (euristica) tra punto 1 e 2</returns>
</member><member name="T:GridBasedLibrary.NullDistanceFunction">
	<summary>
 Rappresenta una funzione per il calcolo delle distanze che restituisce sempre 0
 </summary>
</member><member name="M:GridBasedLibrary.DijkstraPathFinder.#ctor(GridBasedLibrary.ActorDirections)">
	<summary>
 Crea una nuova istanza di DijkstraPathFinder
 </summary>
	<param name="actDirections">Direzioni possibili</param>
</member><member name="T:GridBasedLibrary.DijkstraPathFinder">
	<summary>
 Rappresenta un cercatore di percorsi che utilizza l'algoritmo di Dijkstra
 </summary>
</member><member name="F:GridBasedLibrary.Coord.X">
	<summary>
 Cordinata X
 </summary>
</member><member name="F:GridBasedLibrary.Coord.Y">
	<summary>
 Cordinata Y
 </summary>
</member><member name="M:GridBasedLibrary.Coord.#ctor(System.Int32,System.Int32)">
	<summary>
 Crea una nuova struttura Coord
 </summary>
	<param name="X">Cordinata X</param>
	<param name="Y">Cordinata Y</param>
</member><member name="M:GridBasedLibrary.Coord.#ctor(GridBasedLibrary.Coord)">
	<summary>
 Crea una nuova struttura Coord
 </summary>
	<param name="source">Cordinata originale</param>
	<remarks>Viene copiato solo il valore</remarks>
</member><member name="M:GridBasedLibrary.Coord.#ctor(GridBasedLibrary.ILocated)">
	<summary>
 Crea una nuova struttura Coord
 </summary>
	<param name="source">Oggetto localizzato originale originale</param>
	<remarks>Viene copiato solo il valore</remarks>
</member><member name="M:GridBasedLibrary.Coord.#ctor(System.Int64)">
	<summary>
 Crea una nuova struttura Coord
 </summary>
	<param name="source">Cordinata originale. Espressa in |--32bit--X--|--32bit--Y--|</param>
	<remarks>Utile nelle serializzazioni</remarks>
</member><member name="M:GridBasedLibrary.Coord.#ctor(System.UInt64)">
	<summary>
 Crea una nuova struttura Coord
 </summary>
	<param name="source">Cordinata originale. Espressa in |--32bit--X--|--32bit--Y--|</param>
	<remarks>Utile nelle serializzazioni</remarks>
</member><member name="M:GridBasedLibrary.Coord.#ctor(System.Int32)">
	<summary>
 Crea una nuova struttura Coord
 </summary>
	<param name="source">Cordinata originale. Espressa in |--16bit--X--|--16bit--Y--|</param>
	<remarks>Utile nelle serializzazioni</remarks>
</member><member name="M:GridBasedLibrary.Coord.#ctor(System.UInt32)">
	<summary>
 Crea una nuova struttura Coord
 </summary>
	<param name="source">Cordinata originale. Espressa in |--16bit--X--|--16bit--Y--|</param>
	<remarks>Utile nelle serializzazioni</remarks>
</member><member name="M:GridBasedLibrary.Coord.#ctor(System.Int16)">
	<summary>
 Crea una nuova struttura Coord
 </summary>
	<param name="source">Cordinata originale. Espressa in |--8bit--X--|--8bit--Y--|</param>
	<remarks>Utile nelle serializzazioni</remarks>
</member><member name="M:GridBasedLibrary.Coord.#ctor(System.UInt16)">
	<summary>
 Crea una nuova struttura Coord
 </summary>
	<param name="source">Cordinata originale. Espressa in |--8bit--X--|--8bit--Y--|</param>
	<remarks>Utile nelle serializzazioni</remarks>
</member><member name="M:GridBasedLibrary.Coord.SetX(System.Int32)">
	<summary>
 Imposta la cordinata X
 </summary>
	<param name="value">Valore da impostare</param>
</member><member name="M:GridBasedLibrary.Coord.SetY(System.Int32)">
	<summary>
 Imposta la cordinata Y
 </summary>
	<param name="value">Valore da impostare</param>
</member><member name="M:GridBasedLibrary.Coord.Set(System.Int32,System.Int32)">
	<summary>
 Imposta le cordinate XY
 </summary>
</member><member name="M:GridBasedLibrary.Coord.Set(GridBasedLibrary.ILocated)">
	<summary>
 Imposta le cordinate XY
 </summary>
</member><member name="M:GridBasedLibrary.Coord.GetX">
	<summary>
 Ottiene la cordinata X
 </summary>
	<returns>Cordinata X</returns>
</member><member name="M:GridBasedLibrary.Coord.GetY">
	<summary>
 Ottiene la cordinata Y
 </summary>
	<returns>Cordinata Y</returns>
</member><member name="M:GridBasedLibrary.Coord.GetLocation">
	<summary>
 Ottiene la locazione in coord
 </summary>
	<returns>La locazione</returns>
</member><member name="M:GridBasedLibrary.Coord.GetLocationValue">
	<summary>
 Ottiene il valore di localizzazione
 </summary>
	<returns>Valore espresso in |--32bit--X--|--32bit--Y--|</returns>
	<remarks>E' utile solo nelle operazioni di serializzazione/deserializzazione</remarks>
</member><member name="M:GridBasedLibrary.Coord.GetUp">
	<summary>
 Ottiene la cordinata in alto
 </summary>
	<returns>Cordinata (x,y-1)</returns>
</member><member name="M:GridBasedLibrary.Coord.GetRightUp">
	<summary>
 Ottiene la cordinata in alto a destra
 </summary>
	<returns>Cordinata (x+1,y-1)</returns>
</member><member name="M:GridBasedLibrary.Coord.GetRight">
	<summary>
 Ottiene la cordinata a destra
 </summary>
	<returns>Cordinata (x+1,y)</returns>
</member><member name="M:GridBasedLibrary.Coord.GetRightDown">
	<summary>
 Ottiene la cordinata in basso a destra
 </summary>
	<returns>Cordinata (x+1,y+1)</returns>
</member><member name="M:GridBasedLibrary.Coord.GetDown">
	<summary>
 Ottiene la cordinata in basso
 </summary>
	<returns>Cordinata (x,y+1)</returns>
</member><member name="M:GridBasedLibrary.Coord.GetLeftDown">
	<summary>
 Ottiene la cordinata in basso a sinistra
 </summary>
	<returns>Cordinata (x-1,y+1)</returns>
</member><member name="M:GridBasedLibrary.Coord.GetLeft">
	<summary>
 Ottiene la cordinata a sinistra
 </summary>
	<returns>Cordinata (x-1,y)</returns>
</member><member name="M:GridBasedLibrary.Coord.GetLeftUp">
	<summary>
 Ottiene la cordinata in alto a sinistra
 </summary>
	<returns>Cordinata (x-1,y-1)</returns>
</member><member name="M:GridBasedLibrary.Coord.GetUp(System.Int32)">
	<summary>
 Ottiene la cordinata in alto
 </summary>
	<param name="offset">Offset</param>
	<returns>Cordinata (x,y-o)</returns>
</member><member name="M:GridBasedLibrary.Coord.GetRightUp(System.Int32)">
	<summary>
 Ottiene la cordinata in alto a destra
 </summary>
	<param name="offset">Offset</param>
	<returns>Cordinata (x+o,y-o)</returns>
</member><member name="M:GridBasedLibrary.Coord.GetRight(System.Int32)">
	<summary>
 Ottiene la cordinata a destra
 </summary>
	<param name="offset">Offset</param>
	<returns>Cordinata (x+o,y)</returns>
</member><member name="M:GridBasedLibrary.Coord.GetRightDown(System.Int32)">
	<summary>
 Ottiene la cordinata in basso a destra
 </summary>
	<param name="offset">Offset</param>
	<returns>Cordinata (x+o,y+o)</returns>
</member><member name="M:GridBasedLibrary.Coord.GetDown(System.Int32)">
	<summary>
 Ottiene la cordinata in basso
 </summary>
	<param name="offset">Offset</param>
	<returns>Cordinata (x,y+o)</returns>
</member><member name="M:GridBasedLibrary.Coord.GetLeftDown(System.Int32)">
	<summary>
 Ottiene la cordinata in basso a sinistra
 </summary>
	<param name="offset">Offset</param>
	<returns>Cordinata (x-o,y+o)</returns>
</member><member name="M:GridBasedLibrary.Coord.GetLeft(System.Int32)">
	<summary>
 Ottiene la cordinata a sinistra
 </summary>
	<param name="offset">Offset</param>
	<returns>Cordinata (x-o,y)</returns>
</member><member name="M:GridBasedLibrary.Coord.GetLeftUp(System.Int32)">
	<summary>
 Ottiene la cordinata in alto a sinistra
 </summary>
	<param name="offset">Offset</param>
	<returns>Cordinata (x-o,y-o)</returns>
</member><member name="M:GridBasedLibrary.Coord.GetCoordByDirection(GridBasedLibrary.Direction)">
	<summary>
 Ottiene la cordinata in base alla <paramref name="direction">direzione</paramref>
	</summary>
	<param name="direction">Direzione</param>
	<returns>(x+CoeDirX, y+CoeDirY)</returns>
</member><member name="M:GridBasedLibrary.Coord.GetCoordByDirection(GridBasedLibrary.Direction,System.Int32)">
	<summary>
 Ottiene la cordinata in base alla <paramref name="direction">direzione</paramref>
	</summary>
	<param name="direction">Direzione</param>
	<param name="offset">Offset</param>
	<returns>(x+CoeDirX*offset, y+CoeDirY*offset)</returns>
</member><member name="M:GridBasedLibrary.Coord.GetCoordByOffset(System.Int32,System.Int32)">
	<summary>
 Ottiene la cordinata in base all' offset
 </summary>
	<param name="offx">Offset X</param>
	<param name="offy">Offset Y</param>
	<returns>Cordinata</returns>
</member><member name="M:GridBasedLibrary.Coord.MoveUp">
	<summary>
 Sposta la cordinata in alto
 </summary>
</member><member name="M:GridBasedLibrary.Coord.MoveRightUp">
	<summary>
 Sposta la cordinata in alto a destra
 </summary>
</member><member name="M:GridBasedLibrary.Coord.MoveRight">
	<summary>
 Sposta la cordinata a destra
 </summary>
</member><member name="M:GridBasedLibrary.Coord.MoveRightDown">
	<summary>
 Sposta la cordinata in basso a destra
 </summary>
</member><member name="M:GridBasedLibrary.Coord.MoveDown">
	<summary>
 Sposta la cordinata in basso
 </summary>
</member><member name="M:GridBasedLibrary.Coord.MoveLeftDown">
	<summary>
 Sposta la cordinata in basso a sinistra
 </summary>
</member><member name="M:GridBasedLibrary.Coord.MoveLeft">
	<summary>
 Sposta la cordinata a sinistra
 </summary>
</member><member name="M:GridBasedLibrary.Coord.MoveLeftUp">
	<summary>
 Sposta la cordinata in alto a sinistra
 </summary>
</member><member name="M:GridBasedLibrary.Coord.MoveUp(System.Int32)">
	<summary>
 Sposta la cordinata in alto
 </summary>
	<param name="offset">Offset</param>
</member><member name="M:GridBasedLibrary.Coord.MoveRightUp(System.Int32)">
	<summary>
 Sposta la cordinata in alto a destra
 </summary>
	<param name="offset">Offset</param>
</member><member name="M:GridBasedLibrary.Coord.MoveRight(System.Int32)">
	<summary>
 Sposta la cordinata a destra
 </summary>
	<param name="offset">Offset</param>
</member><member name="M:GridBasedLibrary.Coord.MoveRightDown(System.Int32)">
	<summary>
 Sposta la cordinata in basso a destra
 </summary>
	<param name="offset">Offset</param>
</member><member name="M:GridBasedLibrary.Coord.MoveDown(System.Int32)">
	<summary>
 Sposta la cordinata in basso
 </summary>
	<param name="offset">Offset</param>
</member><member name="M:GridBasedLibrary.Coord.MoveLeftDown(System.Int32)">
	<summary>
 Sposta la cordinata in basso a sinistra
 </summary>
	<param name="offset">Offset</param>
</member><member name="M:GridBasedLibrary.Coord.MoveLeft(System.Int32)">
	<summary>
 Sposta la cordinata a sinistra
 </summary>
	<param name="offset">Offset</param>
</member><member name="M:GridBasedLibrary.Coord.MoveLeftUp(System.Int32)">
	<summary>
 Sposta la cordinata in alto a sinistra
 </summary>
	<param name="offset">Offset</param>
</member><member name="M:GridBasedLibrary.Coord.MoveByDirection(GridBasedLibrary.Direction)">
	<summary>
 Sposta la cordinata in base alla <paramref name="direction">direzione</paramref>
	</summary>
	<param name="direction">Direzione</param>
</member><member name="M:GridBasedLibrary.Coord.MoveByDirection(GridBasedLibrary.Direction,System.Int32)">
	<summary>
 Sposta la cordinata in base alla <paramref name="direction">direzione</paramref>
	</summary>
	<param name="direction">Direzione</param>
	<param name="offset">Offset</param>
</member><member name="M:GridBasedLibrary.Coord.MoveByOffset(System.Int32,System.Int32)">
	<summary>
 Sposta la cordinata in base all' offset
 </summary>
	<param name="offx">Offset X</param>
	<param name="offy">Offset Y</param>
</member><member name="M:GridBasedLibrary.Coord.MoveTo(System.Int32,System.Int32)">
	<summary>
 Sposta la cordinata a destinazione
 </summary>
	<param name="destX">Destinazione X</param>
	<param name="destY">Destinazione Y</param>
</member><member name="M:GridBasedLibrary.Coord.MoveTo(GridBasedLibrary.ILocated)">
	<summary>
 Sposta la cordinata a destinazione
 </summary>
	<param name="dest">Destinazione</param>
</member><member name="M:GridBasedLibrary.Coord.ToString">
	<summary>
 Rappresenta in formato string la cordinata
 </summary>
	<returns>Espressa in ($x,$y)</returns>
</member><member name="T:GridBasedLibrary.Coord">
	<summary>
 Rappresenta una cordinata
 </summary>
</member><member name="M:GridBasedLibrary.RandomGenerator.NextInt">
	<summary>
 Genera un numero intero casuale compreso tra 0 e int.maxvalue
 </summary>
	<returns>Intero casuale compreso tra 0 e int.maxvalue</returns>
</member><member name="M:GridBasedLibrary.RandomGenerator.NextInt(System.Int32)">
	<summary>
 Genera un numero intero casuale compreso tra 0 e Max
 </summary>
	<returns>Intero casuale compreso tra 0 e max</returns>
</member><member name="M:GridBasedLibrary.RandomGenerator.NextInt(System.Int32,System.Int32)">
	<summary>
 Genera un numero intero casuale compreso tra Min e Max
 </summary>
	<returns>Intero casuale compreso tra Min e Max</returns>
</member><member name="M:GridBasedLibrary.RandomGenerator.NextSingle">
	<summary>
 Genera un numero single casuale compreso tra 0 e 1
 </summary>
	<returns>Single casuale compreso tra 0 e 1</returns>
</member><member name="M:GridBasedLibrary.RandomGenerator.NextDouble">
	<summary>
 Genera un numero double casuale compreso tra 0 e 1
 </summary>
	<returns>Double casuale compreso tra 0 e 1</returns>
</member><member name="M:GridBasedLibrary.RandomGenerator.NextItem``1(System.Collections.Generic.IEnumerable{``0})">
	<summary>
 Estrae un elemento casuale dalla lista
 </summary>
	<typeparam name="T">Tipo di elemento</typeparam>
	<param name="coll">Collezione di origine</param>
	<returns>Un elemento casuale</returns>
</member><member name="T:GridBasedLibrary.RandomGenerator">
	<summary>
 Rappresenta un generatore di numeri casuali
 </summary>
</member><member name="F:GridBasedLibrary.flagStartPoint.NONE">
	<summary>
 Viene considerato come startPoint customizzato
 </summary>
</member><member name="F:GridBasedLibrary.flagStartPoint.LEFT">
	<summary>
 Lo SP può essere a sinistra
 </summary>
</member><member name="F:GridBasedLibrary.flagStartPoint.UP">
	<summary>
 Lo SP può essere sopra
 </summary>
</member><member name="F:GridBasedLibrary.flagStartPoint.RIGHT">
	<summary>
 Lo SP può essere a destra
 </summary>
</member><member name="F:GridBasedLibrary.flagStartPoint.DOWN">
	<summary>
 Lo SP può essere sotto
 </summary>
</member><member name="F:GridBasedLibrary.flagStartPoint.CENTRAL">
	<summary>
 Lo SP può essere al centro
 </summary>
</member><member name="F:GridBasedLibrary.flagStartPoint.IGNORE_ANGLE">
	<summary>
 Lo SP non può essere agli angoli
 </summary>
</member><member name="F:GridBasedLibrary.flagStartPoint.DOUBLE_SIDE_ANGLE">
	<summary>
 Gli angoli per essere considerati devono avere la flag dei lati adiacenti abilitati
 </summary>
	<remarks></remarks>
</member><member name="T:GridBasedLibrary.flagStartPoint">
	<summary>
 Enum chè rappresenta le flag per lo startPoint
 </summary>
</member><member name="F:GridBasedLibrary.EuclideanDistanceFunction.DF">
	<summary>
 Ottiene o imposta una istanza di DistanceFunction
 </summary>
</member><member name="P:GridBasedLibrary.EuclideanDistanceFunction.DistanceFunction">
	<summary>
 Ottiene la funzione per il calcolo della distanza
 </summary>
	<value>La funzione per il calcolo della distanza</value>
	<returns>La funzione per il calcolo della distanza</returns>
</member><member name="M:GridBasedLibrary.EuclideanDistanceFunction.#ctor">
	<summary>
 Crea una nuova istanza di EuclideanDistanceFunction
 </summary>
</member><member name="M:GridBasedLibrary.EuclideanDistanceFunction.GetDistance(System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
	<summary>
 Calcola la distanza tra 1 e 2
 </summary>
	<param name="x1">Cordinata x del punto 1</param>
	<param name="y1">Cordinata y del punto 1</param>
	<param name="x2">Cordinata x del punto 2</param>
	<param name="y2">Cordinata y del punto 2</param>
	<param name="scale">Valore di scala</param>
	<returns>Un valore che indica la distanza (euristica) tra punto 1 e 2</returns>
</member><member name="M:GridBasedLibrary.EuclideanDistanceFunction.GetDistance(GridBasedLibrary.ILocated,GridBasedLibrary.ILocated,System.Single)">
	<summary>
 Calcola la distanza tra 1 e 2
 </summary>
	<param name="c1">Cordinata 1</param>
	<param name="c2">Cordinata 2</param>
	<param name="scale">Valore di scala</param>
	<returns>Un valore che indica la distanza (euristica) tra punto 1 e 2</returns>
</member><member name="T:GridBasedLibrary.EuclideanDistanceFunction">
	<summary>
 Calcola la distanza di euclide tra 2 punti
 </summary>
	<remarks>Teorema di pitagora</remarks>
</member><member name="F:GridBasedLibrary.MapGenerator.map">
	<summary>
 Ottiene o imposta la mappa di riferimento
 </summary>
</member><member name="F:GridBasedLibrary.MapGenerator.region">
	<summary>
 Ottiene la regione su cui generare
 </summary>
</member><member name="M:GridBasedLibrary.MapGenerator.Generate(GridBasedLibrary.IMap)">
	<summary>
 Genera la mappa su tutta mapRef
 </summary>
	<param name="mapRef">Mappa di riferimento</param>
</member><member name="M:GridBasedLibrary.MapGenerator.Generate(GridBasedLibrary.IMap,GridBasedLibrary.Rectangle)">
	<summary>
 Genera la mappa su mapRef su tutta la regione
 </summary>
	<param name="mapRef">Mappa di riferimento</param>
	<param name="region">Regione su cui generare la mappa</param>
</member><member name="M:GridBasedLibrary.MapGenerator.Generate(GridBasedLibrary.IMap,GridBasedLibrary.ILocated,GridBasedLibrary.Size)">
	<summary>
 Genera la mappa su mapRef su tutta la regione
 </summary>
	<param name="mapRef">Mappa di riferimento</param>
	<param name="regionC">Cordinata della regione</param>
	<param name="regionS">Dimensioni dellla regione</param>
</member><member name="M:GridBasedLibrary.MapGenerator.Generate(GridBasedLibrary.IMap,System.Int32,System.Int32,System.UInt32,System.UInt32)">
	<summary>
 Genera la mappa su mapRef su tutta la regione
 </summary>
	<param name="mapRef">Mappa di riferimento</param>
 z<param name="regionX">Cordinata x della regione</param>
	<param name="regionY">Cordinata y della regione</param>
	<param name="regionWidth">Larghezza della regione</param>
	<param name="regionHeight">Altezza della regione</param>
</member><member name="M:GridBasedLibrary.MapGenerator.Generate">
	<summary>
 Genera la mappa
 </summary>
</member><member name="T:GridBasedLibrary.MapGenerator">
	<summary>
 Classe base per i generatori di mappe
 </summary>
</member><member name="F:GridBasedLibrary.MazeGenerator.flagSP">
	<summary>
 Ottiene o imposta le flag per lo startPoint
 </summary>
</member><member name="F:GridBasedLibrary.MazeGenerator.StartPoint">
	<summary>
 Ottiene il punto iniziale
 </summary>
	<remarks></remarks>
</member><member name="F:GridBasedLibrary.MazeGenerator.mazeMode">
	<summary>
 Ottiene o imposta la modalità di sviluppo del labirinto
 </summary>
</member><member name="F:GridBasedLibrary.MazeGenerator.wallTile">
	<summary>
 Ottiene o imposta il tile che rappresenta il muro
 </summary>
</member><member name="F:GridBasedLibrary.MazeGenerator.floorTile">
	<summary>
 Ottiene o imposta il tile che rappresenta il pavimento
 </summary>
</member><member name="F:GridBasedLibrary.MazeGenerator.directionVector">
	<summary>
 Ottiene o imposta la lista che contiene le direzioni di espansione
 </summary>
</member><member name="F:GridBasedLibrary.MazeGenerator.branchStack">
	<summary>
 Ottiene o imposta la struttura dati che contiene il branch
 </summary>
</member><member name="M:GridBasedLibrary.MazeGenerator.#ctor(GridBasedLibrary.IRandomGenerator,GridBasedLibrary.ITile,GridBasedLibrary.ITile,GridBasedLibrary.mazeMode,GridBasedLibrary.flagStartPoint)">
	<summary>
 Crea una nuova istanza di mazegenerator
 </summary>
	<param name="random">Generatore di numeri casuali da utilizzare</param>
	<param name="floor">Tile come pavimento</param>
	<param name="wall">Tile come muro</param>
	<param name="mazeMode">Modalità di espansione del labirinto</param>
	<param name="FlagStartPoint">Punto iniziale</param>
</member><member name="M:GridBasedLibrary.MazeGenerator.#ctor(GridBasedLibrary.IRandomGenerator,GridBasedLibrary.ITile,GridBasedLibrary.ITile,GridBasedLibrary.ILocated,GridBasedLibrary.mazeMode,GridBasedLibrary.flagStartPoint)">
	<summary>
 Crea una nuova istanza di mazegenerator
 </summary>
	<param name="random">Generatore di numeri casuali da utilizzare</param>
	<param name="floor">Tile come pavimento</param>
	<param name="wall">Tile come muro</param>
	<param name="mazeMode">Modalità di espansione del labirinto</param>
	<param name="FlagStartPoint">Punto iniziale</param>
</member><member name="M:GridBasedLibrary.MazeGenerator.Generate">
	<summary>
 Genera il labirinto
 </summary>
</member><member name="M:GridBasedLibrary.MazeGenerator.SetWallRegion">
	<summary>
 Imposta i muri su tutta la regione
 </summary>
</member><member name="M:GridBasedLibrary.MazeGenerator.SetWall(System.Int32,System.Int32)">
	<summary>
 Imposta il muro alla cordinata specificata 
 </summary>
	<param name="x">Cordinata X</param>
	<param name="y">Cordinata Y</param>
</member><member name="M:GridBasedLibrary.MazeGenerator.SetWall(GridBasedLibrary.ILocated)">
	<summary>
 Imposta il muro alla cordinata specificata 
 </summary>
	<param name="c">Cordinata</param>
</member><member name="M:GridBasedLibrary.MazeGenerator.Dig(System.Int32,System.Int32)">
	<summary>
 Imposta il pavimento alla cordinata specificata 
 </summary>
	<param name="x">Cordinata X</param>
	<param name="y">Cordinata Y</param>
</member><member name="M:GridBasedLibrary.MazeGenerator.Dig(GridBasedLibrary.ILocated)">
	<summary>
 Imposta il pavimento alla cordinata specificata 
 </summary>
	<param name="c">Cordinata</param>
</member><member name="M:GridBasedLibrary.MazeGenerator.getStartPoint">
	<summary>
 Ottiene il punto iniziale del labirinto
 </summary>
	<returns>Il punto iniziale del labirinto</returns>
	<remarks>Il valore ha senso solo dopo con la creazione di un labirinto</remarks>
</member><member name="M:GridBasedLibrary.MazeGenerator.MakeStartPoint">
	<summary>
 Crea il punto iniziale
 </summary>
</member><member name="M:GridBasedLibrary.MazeGenerator.InitDirectionVector">
	<summary>
 Inizializza il vettore delle direzioni
 </summary>
</member><member name="M:GridBasedLibrary.MazeGenerator.MakeFirstBranch">
	<summary>
 Crea il primo ramo
 </summary>
</member><member name="M:GridBasedLibrary.MazeGenerator.MakeOtherBranch">
	<summary>
 Crea gli altri rami
 </summary>
</member><member name="M:GridBasedLibrary.MazeGenerator.GetAvaliableDir(GridBasedLibrary.ILocated)">
	<summary>
 Ottiene elenco di direzioni di espansioni disponibili per il punto
 </summary>
	<param name="point">Punto di riferimento</param>
	<returns>L'elenco di direzioni disponibili</returns>
</member><member name="M:GridBasedLibrary.MazeGenerator.IsDiggable(GridBasedLibrary.ILocated)">
	<summary>
 Esegue la verifica se è scavabile
 </summary>
	<param name="point">Punto da verificare</param>
	<returns>True se è scavabile, altrimenti false</returns>
</member><member name="M:GridBasedLibrary.MazeGenerator.IsDiggable(System.Int32,System.Int32)">
	<summary>
 Esegue la verifica se è scavabile
 </summary>
	<param name="pointX">Cordinata X del punto da verificare</param>
	<param name="pointY">Cordinata Y del punto da verificare</param>
	<returns>True se è scavabile, altrimenti false</returns>
</member><member name="T:GridBasedLibrary.MazeGenerator">
	<summary>
 Rappresenta un generatore di labirinti
 </summary>
</member><member name="F:GridBasedLibrary.SquaredEuclideanDistanceFunction.DF">
	<summary>
 Ottiene o imposta una istanza di DistanceFunction
 </summary>
</member><member name="P:GridBasedLibrary.SquaredEuclideanDistanceFunction.DistanceFunction">
	<summary>
 Ottiene la funzione per il calcolo della distanza
 </summary>
	<value>La funzione per il calcolo della distanza</value>
	<returns>La funzione per il calcolo della distanza</returns>
</member><member name="M:GridBasedLibrary.SquaredEuclideanDistanceFunction.#ctor">
	<summary>
 Crea una nuova istanza di SquaredEuclideanDistanceFunction
 </summary>
</member><member name="M:GridBasedLibrary.SquaredEuclideanDistanceFunction.GetDistance(System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
	<summary>
 Calcola la distanza tra 1 e 2
 </summary>
	<param name="x1">Cordinata x del punto 1</param>
	<param name="y1">Cordinata y del punto 1</param>
	<param name="x2">Cordinata x del punto 2</param>
	<param name="y2">Cordinata y del punto 2</param>
	<param name="scale">Valore di scala</param>
	<returns>Un valore che indica la distanza (euristica) tra punto 1 e 2</returns>
</member><member name="M:GridBasedLibrary.SquaredEuclideanDistanceFunction.GetDistance(GridBasedLibrary.ILocated,GridBasedLibrary.ILocated,System.Single)">
	<summary>
 Calcola la distanza tra 1 e 2
 </summary>
	<param name="c1">Cordinata 1</param>
	<param name="c2">Cordinata 2</param>
	<param name="scale">Valore di scala</param>
	<returns>Un valore che indica la distanza (euristica) tra punto 1 e 2</returns>
</member><member name="T:GridBasedLibrary.SquaredEuclideanDistanceFunction">
	<summary>
 Calcola la distanza di euclide tra 2 punti quadrato
 </summary>
	<remarks>Teorema di pitagora</remarks>
</member><member name="F:GridBasedLibrary.GridCoordSelecter.NOT_SELECTED">
	<summary>
 Costante che indica che la cordinata non è selezionata
 </summary>
</member><member name="F:GridBasedLibrary.GridCoordSelecter.SELECTED">
	<summary>
 Costante che indica che la cordinata è selezionata
 </summary>
</member><member name="F:GridBasedLibrary.GridCoordSelecter.grid">
	<summary>
 Rappresenta la mappa delle cordinate selezionate e non
 </summary>
</member><member name="F:GridBasedLibrary.GridCoordSelecter.region">
	<summary>
 Regione dove è possibile selezionare le cordinate
 </summary>
</member><member name="F:GridBasedLibrary.GridCoordSelecter.ignoreOverPoint">
	<summary>
 Ottiene o imposta un valore che indica se ignorare i punti fuori dall' area
 </summary>
</member><member name="M:GridBasedLibrary.GridCoordSelecter.#ctor(GridBasedLibrary.Rectangle,System.Boolean)">
	<summary>
 Crea una nuova di GridCoordSelecter
 </summary>
	<param name="region">Regione</param>
	<param name="ignoreOverPoint">Opzione che indica se ignorare il punti fuori dal rettangolo o lanciare un eccezione</param>
</member><member name="M:GridBasedLibrary.GridCoordSelecter.#ctor(GridBasedLibrary.Coord,GridBasedLibrary.Size,System.Boolean)">
	<summary>
 Crea una nuova di GridCoordSelecter
 </summary>
	<param name="offset">Locazione della regione</param>
	<param name="size">Dimensione della regione</param>
	<param name="ignoreOverPoint">Opzione che indica se ignorare il punti fuori dal rettangolo o lanciare un eccezione</param>
</member><member name="M:GridBasedLibrary.GridCoordSelecter.#ctor(GridBasedLibrary.ILocated,GridBasedLibrary.Size,System.Boolean)">
	<summary>
 Crea una nuova di GridCoordSelecter
 </summary>
	<param name="offset">Locazione della regione</param>
	<param name="size">Dimensione della regione</param>
	<param name="ignoreOverPoint">Opzione che indica se ignorare il punti fuori dal rettangolo o lanciare un eccezione</param>
</member><member name="M:GridBasedLibrary.GridCoordSelecter.#ctor(System.Int32,System.Int32,System.UInt32,System.UInt32,System.Boolean)">
	<summary>
 Crea una nuova di GridCoordSelecter
 </summary>
	<param name="offX">Offset X</param>
	<param name="offY">Offset Y</param>
	<param name="width">Larghezza</param>
	<param name="height">Altezza</param>
	<param name="ignoreOverPoint">Opzione che indica se ignorare il punti fuori dal rettangolo o lanciare un eccezione</param>
</member><member name="M:GridBasedLibrary.GridCoordSelecter.Select(GridBasedLibrary.ILocated)">
	<summary>
 Seleziona una cordinata
 </summary>
	<param name="c">Cordinata da selezionare</param>
</member><member name="M:GridBasedLibrary.GridCoordSelecter.Select(System.Int32,System.Int32)">
	<summary>
 Seleziona una cordinata
 </summary>
	<param name="x">Cordinata x</param>
	<param name="y">Cordinata y</param>
</member><member name="M:GridBasedLibrary.GridCoordSelecter.DeSelect(GridBasedLibrary.ILocated)">
	<summary>
 Deseleziona una cordinata
 </summary>
	<param name="c">Cordinata da deselezionare</param>
</member><member name="M:GridBasedLibrary.GridCoordSelecter.DeSelect(System.Int32,System.Int32)">
	<summary>
 Deseleziona una cordinata
 </summary>
	<param name="x">Cordinata x</param>
	<param name="y">Cordinata y</param>
</member><member name="M:GridBasedLibrary.GridCoordSelecter.DeSelectAll">
	<summary>
 Deseleziona tutte le cordinate
 </summary>
</member><member name="M:GridBasedLibrary.GridCoordSelecter.GetSelection">
	<summary>
 Ottiene le cordinate selezionate
 </summary>
	<returns>Cordinate selezionate</returns>
</member><member name="M:GridBasedLibrary.GridCoordSelecter.IsSelected(GridBasedLibrary.ILocated)">
	<summary>
 Verifica se è selezionata una cordinata
 </summary>
	<param name="c">Cordinata da verificare</param>
</member><member name="M:GridBasedLibrary.GridCoordSelecter.IsSelected(System.Int32,System.Int32)">
	<summary>
 Verifica se è selezionata una cordinata
 </summary>
	<param name="x">Cordinata x</param>
	<param name="y">Cordinata y</param>
</member><member name="M:GridBasedLibrary.GridCoordSelecter.GetEnumerator">
	<summary>
 Restituisce l'enumeratore usato da questa classe
 </summary>
	<returns>Enumeratore usato</returns>
</member><member name="M:GridBasedLibrary.GridCoordSelecter.GetEnumerator1">
	<summary>
 Restituisce l'enumeratore usato da questa classe
 </summary>
	<returns>Enumeratore usato</returns>
</member><member name="F:GridBasedLibrary.GridCoordSelecter.GridCoordSelectionEnumerator.gridSelecter">
	<summary>
 Ottiene o imposta il gridSelecter da enumerare
 </summary>
</member><member name="F:GridBasedLibrary.GridCoordSelecter.GridCoordSelectionEnumerator.internalCurrent">
	<summary>
 Ottiene la cordinata corrente interna(usata per accedere a grid)
 </summary>
</member><member name="M:GridBasedLibrary.GridCoordSelecter.GridCoordSelectionEnumerator.#ctor(GridBasedLibrary.GridCoordSelecter)">
	<summary>
 Crea una nuova istanza di GridCoordSelectionEnumerator
 </summary>
</member><member name="P:GridBasedLibrary.GridCoordSelecter.GridCoordSelectionEnumerator.Current">
	<summary>
 Ottiene la cordinata corrente
 </summary>
	<value>La cordinata corrente</value>
	<returns>La cordinata corrente</returns>
</member><member name="P:GridBasedLibrary.GridCoordSelecter.GridCoordSelectionEnumerator.Current1">
	<summary>
 Ottiene la cordinata corrente
 </summary>
	<value>La cordinata corrente</value>
	<returns>La cordinata corrente</returns>
</member><member name="M:GridBasedLibrary.GridCoordSelecter.GridCoordSelectionEnumerator.MoveNext">
	<summary>
 Sposta in avanti la cordinata corrente
 </summary>
	<returns>True se è stato spostato con successo, altrimenti false</returns>
</member><member name="M:GridBasedLibrary.GridCoordSelecter.GridCoordSelectionEnumerator.Reset">
	<summary>
 Resetta la posizione di internalCurrent
 </summary>
</member><member name="T:GridBasedLibrary.GridCoordSelecter.GridCoordSelectionEnumerator">
	<summary>
 Rappresenta l'enumeratore usato nei cicli for each
 </summary>
</member><member name="T:GridBasedLibrary.GridCoordSelecter">
	<summary>
 Rappresenta un selecter di cordinate che utilizza un algoritmo a griglia
 </summary>
</member><member name="M:GridBasedLibrary.ILocated.GetX">
	<summary>
 Ottiene la cordinata X
 </summary>
	<returns>Cordinata X</returns>
</member><member name="M:GridBasedLibrary.ILocated.GetY">
	<summary>
 Ottiene la cordinata Y
 </summary>
	<returns>Cordinata Y</returns>
</member><member name="M:GridBasedLibrary.ILocated.GetLocation">
	<summary>
 Ottiene la locazione in coord
 </summary>
	<returns>La locazione</returns>
</member><member name="M:GridBasedLibrary.ILocated.GetLocationValue">
	<summary>
 Ottiene il valore di localizzazione
 </summary>
	<returns>Valore espresso in |--32bit--X--|--32bit--Y--|</returns>
	<remarks>E' utile solo nelle operazioni di serializzazione/deserializzazione</remarks>
</member><member name="M:GridBasedLibrary.ILocated.GetUp">
	<summary>
 Ottiene la cordinata in alto
 </summary>
	<returns>Cordinata (x,y-1)</returns>
</member><member name="M:GridBasedLibrary.ILocated.GetRightUp">
	<summary>
 Ottiene la cordinata in alto a destra
 </summary>
	<returns>Cordinata (x+1,y-1)</returns>
</member><member name="M:GridBasedLibrary.ILocated.GetRight">
	<summary>
 Ottiene la cordinata a destra
 </summary>
	<returns>Cordinata (x+1,y)</returns>
</member><member name="M:GridBasedLibrary.ILocated.GetRightDown">
	<summary>
 Ottiene la cordinata in basso a destra
 </summary>
	<returns>Cordinata (x+1,y+1)</returns>
</member><member name="M:GridBasedLibrary.ILocated.GetDown">
	<summary>
 Ottiene la cordinata in basso
 </summary>
	<returns>Cordinata (x,y+1)</returns>
</member><member name="M:GridBasedLibrary.ILocated.GetLeftDown">
	<summary>
 Ottiene la cordinata in basso a sinistra
 </summary>
	<returns>Cordinata (x-1,y+1)</returns>
</member><member name="M:GridBasedLibrary.ILocated.GetLeft">
	<summary>
 Ottiene la cordinata a sinistra
 </summary>
	<returns>Cordinata (x-1,y)</returns>
</member><member name="M:GridBasedLibrary.ILocated.GetLeftUp">
	<summary>
 Ottiene la cordinata in alto a sinistra
 </summary>
	<returns>Cordinata (x-1,y-1)</returns>
</member><member name="M:GridBasedLibrary.ILocated.GetUp(System.Int32)">
	<summary>
 Ottiene la cordinata in alto
 </summary>
	<param name="offset">Offset</param>
	<returns>Cordinata (x,y-o)</returns>
</member><member name="M:GridBasedLibrary.ILocated.GetRightUp(System.Int32)">
	<summary>
 Ottiene la cordinata in alto a destra
 </summary>
	<param name="offset">Offset</param>
	<returns>Cordinata (x+o,y-o)</returns>
</member><member name="M:GridBasedLibrary.ILocated.GetRight(System.Int32)">
	<summary>
 Ottiene la cordinata a destra
 </summary>
	<param name="offset">Offset</param>
	<returns>Cordinata (x+o,y)</returns>
</member><member name="M:GridBasedLibrary.ILocated.GetRightDown(System.Int32)">
	<summary>
 Ottiene la cordinata in basso a destra
 </summary>
	<param name="offset">Offset</param>
	<returns>Cordinata (x+o,y+o)</returns>
</member><member name="M:GridBasedLibrary.ILocated.GetDown(System.Int32)">
	<summary>
 Ottiene la cordinata in basso
 </summary>
	<param name="offset">Offset</param>
	<returns>Cordinata (x,y+o)</returns>
</member><member name="M:GridBasedLibrary.ILocated.GetLeftDown(System.Int32)">
	<summary>
 Ottiene la cordinata in basso a sinistra
 </summary>
	<param name="offset">Offset</param>
	<returns>Cordinata (x-o,y+o)</returns>
</member><member name="M:GridBasedLibrary.ILocated.GetLeft(System.Int32)">
	<summary>
 Ottiene la cordinata a sinistra
 </summary>
	<param name="offset">Offset</param>
	<returns>Cordinata (x-o,y)</returns>
</member><member name="M:GridBasedLibrary.ILocated.GetLeftUp(System.Int32)">
	<summary>
 Ottiene la cordinata in alto a sinistra
 </summary>
	<param name="offset">Offset</param>
	<returns>Cordinata (x-o,y-o)</returns>
</member><member name="M:GridBasedLibrary.ILocated.GetCoordByDirection(GridBasedLibrary.Direction)">
	<summary>
 Ottiene la cordinata in base alla <paramref name="direction">direzione</paramref>
	</summary>
	<param name="direction">Direzione</param>
	<returns>(x+CoeDirX, y+CoeDirY)</returns>
</member><member name="M:GridBasedLibrary.ILocated.GetCoordByDirection(GridBasedLibrary.Direction,System.Int32)">
	<summary>
 Ottiene la cordinata in base alla <paramref name="direction">direzione</paramref>
	</summary>
	<param name="direction">Direzione</param>
	<param name="offset">Offset</param>
	<returns>(x+CoeDirX*offset, y+CoeDirY*offset)</returns>
</member><member name="M:GridBasedLibrary.ILocated.GetCoordByOffset(System.Int32,System.Int32)">
	<summary>
 Ottiene la cordinata in base all' offset
 </summary>
	<param name="offx">Offset X</param>
	<param name="offy">Offset Y</param>
	<returns>Cordinata</returns>
</member><member name="T:GridBasedLibrary.ILocated">
	<summary>
 Interfaccia che rappresenta la locazione di un oggetto
 </summary>
</member><member name="M:GridBasedLibrary.IMap.GetMapTile(System.Int32,System.Int32)">
	<summary>
 Restituisce il MapTile che si trova alla cordinata specificata
 </summary>
	<param name="x">Cordinata x</param>
	<param name="y">Cordinata y</param>
	<returns>MapTile che si trova alla cordinata specificata</returns>
</member><member name="M:GridBasedLibrary.IMap.GetMapTile(GridBasedLibrary.ILocated)">
	<summary>
 Restituisce il MapTile che si trova alla cordinata specificata
 </summary>
	<param name="c">Cordinata</param>
	<returns>MapTile che si trova alla cordinata specificata</returns>
</member><member name="M:GridBasedLibrary.IMap.GetTile(System.Int32,System.Int32)">
	<summary>
 Restituisce il Tile che si trova alla cordinata specificata
 </summary>
	<param name="x">Cordinata x</param>
	<param name="y">Cordinata y</param>
	<returns>MapTile che si trova alla cordinata specificata</returns>
</member><member name="M:GridBasedLibrary.IMap.GetTile(GridBasedLibrary.ILocated)">
	<summary>
 Restituisce il Tile che si trova alla cordinata specificata
 </summary>
	<param name="c">Cordinata</param>
	<returns>MapTile che si trova alla cordinata specificata</returns>
</member><member name="M:GridBasedLibrary.IMap.GetDefaultTile">
	<summary>
 Ottiene il tile di default usato nelle maptile senza tile
 </summary>
	<returns>Tile di default</returns>
</member><member name="M:GridBasedLibrary.IMap.GetSize">
	<summary>
 Restituisce le dimensioni della mappa
 </summary>
	<returns>Le dimensioni</returns>
</member><member name="M:GridBasedLibrary.IMap.GetLocation">
	<summary>
 Restituisce la locazione della mappa
 </summary>
	<returns>Locazione della mappa</returns>
</member><member name="M:GridBasedLibrary.IMap.SetTile(System.Int32,System.Int32,GridBasedLibrary.ITile)">
	<summary>
 Imposta il tile alla cordinata specificata
 </summary>
	<param name="x">Cordinata x</param>
	<param name="y">Cordinata y</param>
	<param name="newTile">Nuovo tile</param>
</member><member name="M:GridBasedLibrary.IMap.SetTile(GridBasedLibrary.ILocated,GridBasedLibrary.ITile)">
	<summary>
 Imposta il tile alla cordinata specificata
 </summary>
	<param name="dest">Cordinata x</param>
	<param name="newTile">Nuovo tile</param>
	<exception cref="T:System.ArgumentNullException">Si verifica quando dest è nothing</exception>
</member><member name="M:GridBasedLibrary.IMap.SetDefaultTile(GridBasedLibrary.ITile)">
	<summary>
 Imposta il tile di default
 </summary>
	<param name="newTile">Nuovo tile</param>
	<exception cref="T:System.ArgumentNullException">Si verifica quando newtile è nothing</exception>
</member><member name="M:GridBasedLibrary.IMap.InitMap">
	<summary>
 Inizializza i tile
 </summary>
</member><member name="M:GridBasedLibrary.IMap.IsValid(GridBasedLibrary.ILocated)">
	<summary>
 Verifica che la cordinata è valida nella mappa
 </summary>
	<param name="c">Cordinata da verificare</param>
	<returns>True se è valida, altrimenti false</returns>
</member><member name="M:GridBasedLibrary.IMap.IsValid(System.Int32,System.Int32)">
	<summary>
 Verifica che la cordinata è valida nella mappa
 </summary>
	<param name="cX">Cordinata X</param>
	<param name="cY">Cordinat Y</param>
	<returns>True se è valida, altrimenti false</returns>
</member><member name="M:GridBasedLibrary.IMap.NotifyChange(GridBasedLibrary.IActor,GridBasedLibrary.IMapTile,GridBasedLibrary.IMapTile)">
	<summary>
 Viene notificato a IMap che l'attore ha cambiato posizione
 </summary>
	<param name="act">Attore che si è spostato</param>
	<param name="src">Sorgente</param>
	<param name="dest">Destinazione</param>
</member><member name="M:GridBasedLibrary.IMap.SetActor(GridBasedLibrary.IActor)">
	<summary>
 Imposta l'attore sulla mappa (in modo insicuro)
 </summary>
	<param name="act">Attore da impostare</param>
</member><member name="M:GridBasedLibrary.IMap.GetActor(GridBasedLibrary.ILocated)">
	<summary>
 Restituisce l'attore presente nella cordinata
 </summary>
	<param name="c">Cordinata</param>
	<returns>Attore che è presente</returns>
	<remarks>Se non è presente alcun attore restituisce Nothing</remarks>
</member><member name="M:GridBasedLibrary.IMap.GetActor(System.Int32,System.Int32)">
	<summary>
 Restituisce l'attore presente nella cordinata
 </summary>
	<param name="x">Cordinata X</param>
	<param name="y">Cordinata Y</param>
	<returns>Attore che è presente</returns>
	<remarks>Se non è presente alcun attore restituisce Nothing</remarks>
</member><member name="M:GridBasedLibrary.IMap.DespawnActor(GridBasedLibrary.IActor)">
	<summary>
 Despawna l'attore
 </summary>
	<param name="act">Attore da despawnare</param>
</member><member name="T:GridBasedLibrary.IMap">
	<summary>
 Interfaccia che rappresenta una mappa
 </summary>
</member><member name="F:GridBasedLibrary.HSActor.name">
	<summary>
 Ottiene o imposta il nome dell' attore
 </summary>
</member><member name="M:GridBasedLibrary.HSActor.MoveByOffset(System.Int32,System.Int32)">
	<summary>
 Sposta l'attore di offset
 </summary>
	<param name="offx">Offset X</param>
	<param name="offy">Offset Y</param>
</member><member name="M:GridBasedLibrary.HSActor.GetName">
	<summary>
 Restituisce il nome dell' attore
 </summary>
	<returns>Il nome dell' attore</returns>
</member><member name="M:GridBasedLibrary.HSActor.#ctor(System.String,GridBasedLibrary.ILocated,GridBasedLibrary.IMap)">
	<summary>
 Crea l'attore di nome name alla locazione loc della mappa map
 </summary>
	<param name="name">Nome dell'attore</param>
	<param name="loc">Locazione dell'attore</param>
	<param name="map">Mappa dell' attore</param>
</member><member name="M:GridBasedLibrary.HSActor.#ctor(System.String,System.Int32,System.Int32,GridBasedLibrary.IMap)">
	<summary>
 Crea l'attore di nome name alla locazione loc della mappa map
 </summary>
	<param name="name">Nome dell'attore</param>
	<param name="locX">Locazione X</param>
	<param name="locY">Locazione Y</param>
	<param name="map">Mappa dell' attore</param>
</member><member name="M:GridBasedLibrary.HSActor.Spawn(System.String,GridBasedLibrary.ILocated,GridBasedLibrary.IMap)">
	<summary>
 Crea un attore alle cordinate specificate
 </summary>
	<param name="name">Nome dell'attore</param>
	<param name="loc">Locazione dell'attore</param>
	<param name="map">Mappa dell' attore</param>
	<returns>L'attore che è stato creato</returns>
	<remarks>Se la funzione è fallita, viene restituito nothing</remarks>
</member><member name="M:GridBasedLibrary.HSActor.Spawn(System.String,System.Int32,System.Int32,GridBasedLibrary.IMap)">
	<summary>
 Crea un attore alle cordinate specificate
 </summary>
	<param name="name">Nome dell'attore</param>
	<param name="x">Cordinata X</param>
	<param name="y">Cordinata Y</param>
	<param name="map">Mappa dell' attore</param>
	<returns>L'attore che è stato creato</returns>
	<remarks>Se la funzione è fallita, viene restituito nothing</remarks>
</member><member name="T:GridBasedLibrary.HSActor">
	<summary>
 Rappresenta un attore
 </summary>
	<remarks>Utilizza un algoritmo basato sulla velocità</remarks>
</member><member name="M:GridBasedLibrary.Movable.MoveUp">
	<summary>
 Sposta la cordinata in alto
 </summary>
</member><member name="M:GridBasedLibrary.Movable.MoveRightUp">
	<summary>
 Sposta la cordinata in alto a destra
 </summary>
</member><member name="M:GridBasedLibrary.Movable.MoveRight">
	<summary>
 Sposta la cordinata a destra
 </summary>
</member><member name="M:GridBasedLibrary.Movable.MoveRightDown">
	<summary>
 Sposta la cordinata in basso a destra
 </summary>
</member><member name="M:GridBasedLibrary.Movable.MoveDown">
	<summary>
 Sposta la cordinata in basso
 </summary>
</member><member name="M:GridBasedLibrary.Movable.MoveLeftDown">
	<summary>
 Sposta la cordinata in basso a sinistra
 </summary>
</member><member name="M:GridBasedLibrary.Movable.MoveLeft">
	<summary>
 Sposta la cordinata a sinistra
 </summary>
</member><member name="M:GridBasedLibrary.Movable.MoveLeftUp">
	<summary>
 Sposta la cordinata in alto a sinistra
 </summary>
</member><member name="M:GridBasedLibrary.Movable.MoveUp(System.Int32)">
	<summary>
 Sposta la cordinata in alto
 </summary>
	<param name="offset">Offset</param>
</member><member name="M:GridBasedLibrary.Movable.MoveRightUp(System.Int32)">
	<summary>
 Sposta la cordinata in alto a destra
 </summary>
	<param name="offset">Offset</param>
</member><member name="M:GridBasedLibrary.Movable.MoveRight(System.Int32)">
	<summary>
 Sposta la cordinata a destra
 </summary>
	<param name="offset">Offset</param>
</member><member name="M:GridBasedLibrary.Movable.MoveRightDown(System.Int32)">
	<summary>
 Sposta la cordinata in basso a destra
 </summary>
	<param name="offset">Offset</param>
</member><member name="M:GridBasedLibrary.Movable.MoveDown(System.Int32)">
	<summary>
 Sposta la cordinata in basso
 </summary>
	<param name="offset">Offset</param>
</member><member name="M:GridBasedLibrary.Movable.MoveLeftDown(System.Int32)">
	<summary>
 Sposta la cordinata in basso a sinistra
 </summary>
	<param name="offset">Offset</param>
</member><member name="M:GridBasedLibrary.Movable.MoveLeft(System.Int32)">
	<summary>
 Sposta la cordinata a sinistra
 </summary>
	<param name="offset">Offset</param>
</member><member name="M:GridBasedLibrary.Movable.MoveLeftUp(System.Int32)">
	<summary>
 Sposta la cordinata in alto a sinistra
 </summary>
	<param name="offset">Offset</param>
</member><member name="M:GridBasedLibrary.Movable.MoveByDirection(GridBasedLibrary.Direction)">
	<summary>
 Sposta la cordinata in base alla <paramref name="direction">direzione</paramref>
	</summary>
	<param name="direction">Direzione</param>
</member><member name="M:GridBasedLibrary.Movable.MoveByDirection(GridBasedLibrary.Direction,System.Int32)">
	<summary>
 Sposta la cordinata in base alla <paramref name="direction">direzione</paramref>
	</summary>
	<param name="direction">Direzione</param>
	<param name="offset">Offset</param>
</member><member name="M:GridBasedLibrary.Movable.MoveTo(System.Int32,System.Int32)">
	<summary>
 Sposta la cordinata a destinazione
 </summary>
	<param name="destX">Destinazione X</param>
	<param name="destY">Destinazione Y</param>
</member><member name="M:GridBasedLibrary.Movable.MoveTo(GridBasedLibrary.ILocated)">
	<summary>
 Sposta la cordinata a destinazione
 </summary>
	<param name="dest">Destinazione</param>
</member><member name="M:GridBasedLibrary.Movable.MoveByOffset(System.Int32,System.Int32)">
	<summary>
 Sposta la cordinata in base all' offset
 </summary>
	<param name="offx">Offset X</param>
	<param name="offy">Offset Y</param>
</member><member name="M:GridBasedLibrary.Movable.Set(GridBasedLibrary.ILocated)">
	<summary>
 Imposta le cordinate XY
 </summary>
</member><member name="M:GridBasedLibrary.Movable.Set(System.Int32,System.Int32)">
	<summary>
 Imposta le cordinate XY
 </summary>
</member><member name="M:GridBasedLibrary.Movable.SetX(System.Int32)">
	<summary>
 Imposta la cordinata X
 </summary>
	<param name="value">Valore da impostare</param>
</member><member name="M:GridBasedLibrary.Movable.SetY(System.Int32)">
	<summary>
 Imposta la cordinata Y
 </summary>
	<param name="value">Valore da impostare</param>
</member><member name="T:GridBasedLibrary.Movable">
	<summary>
 Rappresenta un oggetto in grado di spostarsi
 </summary>
	<remarks>Rispetto a movable questa classe è centralizzata in MoveByOffset()</remarks>
</member><member name="F:GridBasedLibrary.HSMapTileClient.mapClient">
	<summary>
 Puntatore alla mappa client
 </summary>
</member><member name="M:GridBasedLibrary.HSMapTileClient.#ctor(GridBasedLibrary.IMapClient,GridBasedLibrary.Coord)">
	<summary>
 Crea una nuova istanza di MapTile
 </summary>
	<param name="map">Mappa da usare</param>
	<param name="loc">Locazione del MapTilr</param>
</member><member name="M:GridBasedLibrary.HSMapTileClient.#ctor(GridBasedLibrary.IMapClient,GridBasedLibrary.ILocated)">
	<summary>
 Crea una nuova istanza di MapTile
 </summary>
	<param name="map">Mappa da usare</param>
	<param name="loc">Locazione del MapTilr</param>
</member><member name="M:GridBasedLibrary.HSMapTileClient.#ctor(GridBasedLibrary.IMapClient,System.Int32,System.Int32)">
	<summary>
 Crea una nuova istanza di MapTile
 </summary>
	<param name="map">Mappa da usare</param>
	<param name="locX">Locazione X del MapTilr</param>
	<param name="locY">Locazione Y del MapTile</param>
</member><member name="M:GridBasedLibrary.HSMapTileClient.CanRenderFlag">
	<summary>
 Restituisce true se deve essere renderizzato, altrimenti false
 </summary>
	<returns>True se deve essere re-renderizzato</returns>
</member><member name="M:GridBasedLibrary.HSMapTileClient.GetMapClient">
	<summary>
 Restituisce la mappa client a cui appartiene questo tile
 </summary>
	<returns>La mappa</returns>
</member><member name="M:GridBasedLibrary.HSMapTileClient.RemoveRenderFlag">
	<summary>
 Rimuove la renderFlag
 </summary>
</member><member name="M:GridBasedLibrary.HSMapTileClient.SetRenderFlag">
	<summary>
 Imposta la renderflag
 </summary>
</member><member name="M:GridBasedLibrary.HSMapTileClient.RemoveTile">
	<summary>
 Rimuove in modo sicuro il tile della mappa
 </summary>
</member><member name="M:GridBasedLibrary.HSMapTileClient.SetTile(GridBasedLibrary.ITile)">
	<summary>
 Imposta in modo sicuro il tile della mappa
 </summary>
</member><member name="T:GridBasedLibrary.HSMapTileClient">
	<summary>
 Rappresenta una mappa ottimizata per i client sul rendering
 </summary>
</member><member name="F:GridBasedLibrary.Size.width">
	<summary>
 Ottiene o imposta la larghezza
 </summary>
</member><member name="F:GridBasedLibrary.Size.height">
	<summary>
 Ottiene o imposta l'altezza
 </summary>
</member><member name="M:GridBasedLibrary.Size.#ctor(System.UInt32,System.UInt32)">
	<summary>
 Crea una nuova istanza di size
 </summary>
	<param name="width">Larghezza</param>
	<param name="height">Altezza</param>
</member><member name="M:GridBasedLibrary.Size.#ctor(System.UInt64)">
	<summary>
 Crea una nuova istanza di size
 </summary>
	<param name="source">Valore size espresso in |--32bit--width--|--32bit--height--|</param>
	<remarks>E' utile solo nelle serializzazioni</remarks>
</member><member name="M:GridBasedLibrary.Size.#ctor(System.Int64)">
	<summary>
 Crea una nuova istanza di size
 </summary>
	<param name="source">Valore size espresso in |--32bit--width--|--32bit--height--|</param>
	<remarks>E' utile solo nelle serializzazioni</remarks>
</member><member name="M:GridBasedLibrary.Size.#ctor(System.Int32)">
	<summary>
 Crea una nuova istanza di size
 </summary>
	<param name="source">Valore size espresso in |--16bit--width--|--16bit--height--|</param>
	<remarks>E' utile solo nelle serializzazioni</remarks>
</member><member name="M:GridBasedLibrary.Size.#ctor(System.UInt32)">
	<summary>
 Crea una nuova istanza di size
 </summary>
	<param name="source">Valore size espresso in |--16bit--width--|--16bit--height--|</param>
	<remarks>E' utile solo nelle serializzazioni</remarks>
</member><member name="M:GridBasedLibrary.Size.#ctor(System.Int16)">
	<summary>
 Crea una nuova istanza di size
 </summary>
	<param name="source">Valore size espresso in |--8bit--width--|--8bit--height--|</param>
	<remarks>E' utile solo nelle serializzazioni</remarks>
</member><member name="M:GridBasedLibrary.Size.#ctor(System.UInt16)">
	<summary>
 Crea una nuova istanza di size
 </summary>
	<param name="source">Valore size espresso in |--8bit--width--|--8bit--height--|</param>
	<remarks>E' utile solo nelle serializzazioni</remarks>
</member><member name="M:GridBasedLibrary.Size.GetWidth">
	<summary>
 Ottiene la larghezza di size
 </summary>
	<returns>La larghezza</returns>
</member><member name="M:GridBasedLibrary.Size.GetHeight">
	<summary>
 Ottiene l'altezza di size
 </summary>
	<returns>L'altezza</returns>
</member><member name="M:GridBasedLibrary.Size.GetSizeValue">
	<summary>
 Ottiene il valore di size usato nelle serializzazioni
 </summary>
	<returns>Il valore di size</returns>
	<remarks>E' usato solo nelle serializzazioni</remarks>
</member><member name="M:GridBasedLibrary.Size.SetWidth(System.UInt32)">
	<summary>
 Imposta la larghezza
 </summary>
	<param name="value">Valore da impostare</param>
</member><member name="M:GridBasedLibrary.Size.SetHeight(System.UInt32)">
	<summary>
 Imposta l'altezza
 </summary>
	<param name="value">Valore</param>
</member><member name="T:GridBasedLibrary.Size">
	<summary>
 Rappresenta le dimensioni di un rettangolo
 </summary>
</member><member name="M:GridBasedLibrary.IActor.GetMap">
	<summary>
 Ottiene il mondo dell'attore
 </summary>
	<returns>Mappa dell'attore</returns>
</member><member name="M:GridBasedLibrary.IActor.CanMoveTo(GridBasedLibrary.ITile)">
	<summary>
 Restituisce True se l'attore può muoversi verso il tile
 </summary>
	<param name="dest">Tile di destinazione</param>
	<returns>True se può moversi</returns>
	<remarks>Verifica soltanto se il tile è compatibile</remarks>
</member><member name="E:GridBasedLibrary.IActor.Moving">
	<summary>
 Evento che si verifica quando sta per essere spostato
 </summary>
	<param name="dest">Destinazione</param>
	<param name="cancel">True se cancellare l'evento</param>
</member><member name="E:GridBasedLibrary.IActor.Moved">
	<summary>
 Evento che si verifica quando è arrivato a destinazione
 </summary>
	<param name="src">Provenienienza</param>
</member><member name="M:GridBasedLibrary.IActor.OnMoving(GridBasedLibrary.IMapTile)">
	<summary>
 Lancia l'evento Moving
 </summary>
	<param name="dest">Destinazione</param>
	<returns>True se annullare l'azione</returns>
</member><member name="M:GridBasedLibrary.IActor.OnMoved(GridBasedLibrary.IMapTile)">
	<summary>
 Lancia l'evento Moved
 </summary>
	<param name="src">Provenienza</param>
</member><member name="T:GridBasedLibrary.IActor">
	<summary>
 Interfaccia che rappresenta un attore
 </summary>
</member><member name="M:GridBasedLibrary.ICoordDistanceFunction.GetDistance(System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
	<summary>
 Calcola la distanza tra 1 e 2
 </summary>
	<param name="x1">Cordinata x del punto 1</param>
	<param name="y1">Cordinata y del punto 1</param>
	<param name="x2">Cordinata x del punto 2</param>
	<param name="y2">Cordinata y del punto 2</param>
	<param name="scale">Valore di scala</param>
	<returns>Un valore che indica la distanza (euristica) tra punto 1 e 2</returns>
</member><member name="M:GridBasedLibrary.ICoordDistanceFunction.GetDistance(GridBasedLibrary.ILocated,GridBasedLibrary.ILocated,System.Single)">
	<summary>
 Calcola la distanza tra 1 e 2
 </summary>
	<param name="c1">Cordinata 1</param>
	<param name="c2">Cordinata 2</param>
	<param name="scale">Valore di scala</param>
	<returns>Un valore che indica la distanza (euristica) tra punto 1 e 2</returns>
</member><member name="T:GridBasedLibrary.ICoordDistanceFunction">
	<summary>
 Interfaccia che rappresenta una funzione per il calcolo della distanza tra 2 punti
 </summary>
	<remarks>Può essere usato per scopi euristici</remarks>
</member><member name="F:GridBasedLibrary.Actor.MapRef">
	<summary>
 Ottiene o imposta la mappa dell'attore
 </summary>
</member><member name="M:GridBasedLibrary.Actor.CanMoveTo(GridBasedLibrary.ITile)">
	<summary>
 Restituisce True se l'attore può muoversi verso il tile
 </summary>
	<param name="dest">Tile di destinazione</param>
	<returns>True se può moversi</returns>
	<remarks>Verifica soltanto se il tile è compatibile</remarks>
</member><member name="M:GridBasedLibrary.Actor.GetMap">
	<summary>
 Ottiene il mondo dell'attore
 </summary>
	<returns>Mappa dell'attore</returns>
</member><member name="E:GridBasedLibrary.Actor.Moved">
	<summary>
 Evento che si verifica quando è arrivato a destinazione
 </summary>
	<param name="src">Provenienienza</param>
</member><member name="E:GridBasedLibrary.Actor.Moving">
	<summary>
 Evento che si verifica quando sta per essere spostato
 </summary>
	<param name="dest">Destinazione</param>
	<param name="cancel">True se cancellare l'evento</param>
</member><member name="M:GridBasedLibrary.Actor.OnMoved(GridBasedLibrary.IMapTile)">
	<summary>
 Lancia l'evento Moved
 </summary>
	<param name="src">Provenienza</param>
</member><member name="M:GridBasedLibrary.Actor.OnMoving(GridBasedLibrary.IMapTile)">
	<summary>
 Lancia l'evento Moving
 </summary>
	<param name="dest">Destinazione</param>
	<returns>True se annullare l'azione</returns>
</member><member name="T:GridBasedLibrary.Actor">
	<summary>
 Classe che rappresenta l'attore di base
 </summary>
</member><member name="F:GridBasedLibrary.RandomMapGenerator.RandomGenerator">
	<summary>
 Ottiene o imposta il generatore 
 </summary>
</member><member name="M:GridBasedLibrary.RandomMapGenerator.#ctor(GridBasedLibrary.IRandomGenerator)">
	<summary>
 Crea una nuova istanza di RandomMapGenerator
 </summary>
	<param name="rnd">Generatore di numeri casuali</param>
</member><member name="T:GridBasedLibrary.RandomMapGenerator">
	<summary>
 Rappresenta un generatore di mappe casuali
 </summary>
</member><member name="M:GridBasedLibrary.ICoordSelecter.Select(System.Int32,System.Int32)">
	<summary>
 Seleziona una cordinata
 </summary>
	<param name="x">Cordinata x</param>
	<param name="y">Cordinata y</param>
</member><member name="M:GridBasedLibrary.ICoordSelecter.Select(GridBasedLibrary.ILocated)">
	<summary>
 Seleziona una cordinata
 </summary>
	<param name="c">Cordinata da selezionare</param>
</member><member name="M:GridBasedLibrary.ICoordSelecter.Select(GridBasedLibrary.ILocated[])">
	<summary>
 Seleziona una cordinata
 </summary>
	<param name="Coords">Cordinate da selezionare</param>
</member><member name="M:GridBasedLibrary.ICoordSelecter.DeSelect(System.Int32,System.Int32)">
	<summary>
 Deseleziona una cordinata
 </summary>
	<param name="x">Cordinata x</param>
	<param name="y">Cordinata y</param>
</member><member name="M:GridBasedLibrary.ICoordSelecter.DeSelect(GridBasedLibrary.ILocated)">
	<summary>
 Deseleziona una cordinata
 </summary>
	<param name="c">Cordinata da deselezionare</param>
</member><member name="M:GridBasedLibrary.ICoordSelecter.DeSelect(GridBasedLibrary.ILocated[])">
	<summary>
 Deseleziona una cordinata
 </summary>
	<param name="Coords">Cordinate da deselezionare</param>
</member><member name="M:GridBasedLibrary.ICoordSelecter.DeSelectAll">
	<summary>
 Deseleziona tutte le cordinate
 </summary>
</member><member name="M:GridBasedLibrary.ICoordSelecter.IsSelected(System.Int32,System.Int32)">
	<summary>
 Verifica se è selezionata una cordinata
 </summary>
	<param name="x">Cordinata x</param>
	<param name="y">Cordinata y</param>
</member><member name="M:GridBasedLibrary.ICoordSelecter.IsSelected(GridBasedLibrary.ILocated)">
	<summary>
 Verifica se è selezionata una cordinata
 </summary>
	<param name="c">Cordinata da verificare</param>
</member><member name="M:GridBasedLibrary.ICoordSelecter.IsSelected(GridBasedLibrary.ILocated[])">
	<summary>
 Verifica se sono selezionate delle cordinate
 </summary>
	<param name="Coords">Cordinate da verificare</param>
</member><member name="M:GridBasedLibrary.ICoordSelecter.GetSelection">
	<summary>
 Ottiene le cordinate selezionate
 </summary>
	<returns>Cordinate selezionate</returns>
</member><member name="M:GridBasedLibrary.ICoordSelecter.CopySelectionTo(GridBasedLibrary.ICoordSelecter,System.Boolean)">
	<summary>
 Copia la selezione su dest
 </summary>
	<param name="dest">ICoordSelecter di destinazione di copia</param>
	<param name="DeSelectAllDest">True se deselezionare tutte le cordinate, altrimenti false</param>
</member><member name="M:GridBasedLibrary.ICoordSelecter.OrSelectionTo(GridBasedLibrary.ICoordSelecter,GridBasedLibrary.ICoordSelecter,System.Boolean)">
	<summary>
 Esegue l'operazione OR tra questa istanza e second e seleziona il risultato su dest
 </summary>
	<param name="second">Secondo ICoordSelecter</param>
	<param name="dest">Selecter di destinazione(risultato)</param>
	<param name="DeSelectAllDest">True se deselezionare dest</param>
	<remarks>NB se (second is dest) e (DeSelectAllDest=True) dest è selezionato dai stessi punti di questa istanza</remarks>
</member><member name="M:GridBasedLibrary.ICoordSelecter.XorSelectionTo(GridBasedLibrary.ICoordSelecter,GridBasedLibrary.ICoordSelecter,System.Boolean)">
	<summary>
 Esegue l'operazione XOR tra questa istanza e second e seleziona il risultato su dest
 </summary>
	<param name="second">Secondo ICoordSelecter</param>
	<param name="dest">Selecter di destinazione(risultato)</param>
	<param name="DeSelectAllDest">True se deselezionare dest</param>
	<remarks>NB se (second is dest) e (DeSelectAllDest=True) dest è selezionato dai stessi punti di questa istanza</remarks>
</member><member name="M:GridBasedLibrary.ICoordSelecter.AndSelectionTo(GridBasedLibrary.ICoordSelecter,GridBasedLibrary.ICoordSelecter,System.Boolean)">
	<summary>
 Esegue l'operazione And tra questa istanza e second e seleziona il risultato su dest
 </summary>
	<param name="second">Secondo ICoordSelecter</param>
	<param name="dest">Selecter di destinazione(risultato)</param>
	<param name="DeSelectAllDest">True se deselezionare dest</param>
	<remarks>NB se (second is dest) e (DeSelectAllDest=True) dest non ha alcuna cordinata selezionata</remarks>
</member><member name="M:GridBasedLibrary.ICoordSelecter.SubSelectionTo(GridBasedLibrary.ICoordSelecter,GridBasedLibrary.ICoordSelecter,System.Boolean)">
	<summary>
 Esegue l'operazione differenza insiemistica tra questa istanza e second e seleziona il risultato su dest
 </summary>
	<param name="second">Secondo ICoordSelecter</param>
	<param name="dest">Selecter di destinazione(risultato)</param>
	<param name="DeSelectAllDest">True se deselezionare dest</param>
	<remarks>NB se (second is dest) e (DeSelectAllDest=True) dest ha gli stesse cordinate selezionate di questa istanza</remarks>
</member><member name="T:GridBasedLibrary.ICoordSelecter">
	<summary>
 Rappresenta un selettore di coordinate
 </summary>
</member><member name="F:GridBasedLibrary.StaticRange.Min">
	<summary>
 Ottiene o imposta il valore Minimo
 </summary>
</member><member name="F:GridBasedLibrary.StaticRange.Max">
	<summary>
 Ottiene o imposta il valore massimo
 </summary>
</member><member name="P:GridBasedLibrary.StaticRange.ByteRange">
	<summary>
 Ottiene un range per i byte
 </summary>
	<value>0-255</value>
	<returns>0-255</returns>
</member><member name="P:GridBasedLibrary.StaticRange.IntegerRange">
	<summary>
 Ottiene un range per i integer
 </summary>
	<value><see cref="T:System.Int32">Integer.MinValue</see>-<see cref="T:System.Int32">Integer.MaxValue</see></value>
	<returns><see cref="T:System.Int32">Integer.MinValue</see>-<see cref="T:System.Int32">Integer.MaxValue</see></returns>
</member><member name="P:GridBasedLibrary.StaticRange.ShortRange">
	<summary>
 Ottiene un range per i byte
 </summary>
	<value><see cref="F:System.Int16.MinValue">Short.MinValue</see>-<see cref="F:System.Int16.MaxValue">Short.MaxValue</see></value>
	<returns><see cref="F:System.Int16.MinValue">Short.MinValue</see>-<see cref="F:System.Int16.MaxValue">Short.MaxValue</see></returns>
</member><member name="P:GridBasedLibrary.StaticRange.UShortRange">
	<summary>
 Ottiene un range per i ushort
 </summary>
	<value><see cref="F:System.UInt16.MinValue">UShort.MinValue</see>-<see cref="F:System.UInt16.MaxValue">UShort.MaxValue</see></value>
	<returns><see cref="F:System.UInt16.MinValue">UShort.MinValue</see>-<see cref="F:System.UInt16.MaxValue">UShort.MaxValue</see></returns>
</member><member name="P:GridBasedLibrary.StaticRange.SByteRange">
	<summary>
 Ottiene un range per i SByte
 </summary>
	<value><see cref="T:System.SByte">SByte.MinValue</see>-<see cref="T:System.SByte">SByte.MaxValue</see></value>
	<returns><see cref="T:System.SByte">SByte.MinValue</see>-<see cref="T:System.SByte">SByte.MaxValue</see></returns>
</member><member name="M:GridBasedLibrary.StaticRange.#ctor(System.Int32,System.Int32)">
	<summary>
 Crea una nuova istanza di Range
 </summary>
	<param name="Min">Valore minimo</param>
	<param name="Max">Valore massimo</param>
</member><member name="M:GridBasedLibrary.StaticRange.GetMin">
	<summary>
 Ottiene il valore minimo
 </summary>
	<returns>Il valore minimo</returns>
</member><member name="M:GridBasedLibrary.StaticRange.GetMax">
	<summary>
 Ottiene il valore massimo
 </summary>
	<returns>Il valore massimo</returns>
</member><member name="M:GridBasedLibrary.StaticRange.GetSize">
	<summary>
 Ottiene la dimensione del range
 </summary>
	<returns>Dimensioni del range</returns>
	<remarks>Max-Min+1</remarks>
</member><member name="M:GridBasedLibrary.StaticRange.GetRange">
	<summary>
 Ottiene il range
 </summary>
	<returns>Il range</returns>
	<remarks>I tipo di valore restituito può variare a seconda dell' implementazione</remarks>
</member><member name="M:GridBasedLibrary.StaticRange.CheckValue(System.Int32)">
	<summary>
 Verifica che il valore è compreso nel range
 </summary>
	<param name="value">Valore da verificare</param>
	<returns>True se è compreso, altrimenti false</returns>
</member><member name="M:GridBasedLibrary.StaticRange.Check">
	<summary>
 Verifica che Min e Max siano corretti
 </summary>
</member><member name="M:GridBasedLibrary.StaticRange.ToString">
	<summary>
 Converte in rappresentazione string questo range
 </summary>
	<returns>[Min-Max]</returns>
</member><member name="T:GridBasedLibrary.StaticRange">
	<summary>
 Rappresenta un range
 </summary>
</member><member name="E:GridBasedLibrary.IErrorable.Error">
	<summary>
 Evento che si verifica quando viene lanciato un errore
 </summary>
	<param name="sender">Oggetto che ha lanciato errore</param>
	<param name="ex">Eccezione rilevata</param>
</member><member name="M:GridBasedLibrary.IErrorable.OnError(System.Exception)">
	<summary>
 Lancia volutamente l'eccezione
 </summary>
	<param name="ex">Eccezione da lanciare</param>
</member><member name="T:GridBasedLibrary.IErrorable">
	<summary>
 Rappresenta l'interfaccia di qualunque oggetto in grado di lanciare un errore
 </summary>
</member><member name="F:GridBasedLibrary.LinearCoordComparer.LinearCoordComparerOption.DEFAULT">
	<summary>
 Utilizza le opzioni di default
 </summary>
</member><member name="F:GridBasedLibrary.LinearCoordComparer.LinearCoordComparerOption.FIRST_X">
	<summary>
 Indica di valutare prima la cordinata x(1)
 </summary>
</member><member name="F:GridBasedLibrary.LinearCoordComparer.LinearCoordComparerOption.RIGHT_TO_LEFT">
	<summary>
 Indica di valutare di più le cordinate a sinistra rispetto a quelle a destra
 </summary>
</member><member name="F:GridBasedLibrary.LinearCoordComparer.LinearCoordComparerOption.DOWN_TO_UP">
	<summary>
 Indica di valutare di più le cordinate più a basso rispetto a quelle alte
 </summary>
	<remarks></remarks>
</member><member name="T:GridBasedLibrary.LinearCoordComparer.LinearCoordComparerOption">
	<summary>
 Rappresenta le opzioni disponibili per la comparazione
 </summary>
	<remarks>Da combinare con or</remarks>
</member><member name="F:GridBasedLibrary.LinearCoordComparer.option">
	<summary>
 Indica le opzioni da usare nella comparazione
 </summary>
</member><member name="M:GridBasedLibrary.LinearCoordComparer.#ctor(GridBasedLibrary.LinearCoordComparer.LinearCoordComparerOption)">
	<summary>
 Crea una nuova istanza di LinearCoordComparer
 </summary>
	<param name="option">Opzioni da usare</param>
</member><member name="M:GridBasedLibrary.LinearCoordComparer.GetOption">
	<summary>
 Restituisce le opzioni in uso
 </summary>
	<returns>Le opzioni</returns>
</member><member name="M:GridBasedLibrary.LinearCoordComparer.SetOption(GridBasedLibrary.LinearCoordComparer.LinearCoordComparerOption)">
	<summary>
 Imposta le opzioni
 </summary>
	<param name="op">opzioni da impostare</param>
</member><member name="M:GridBasedLibrary.LinearCoordComparer.Compare(GridBasedLibrary.ILocated,GridBasedLibrary.ILocated)">
	<summary>
 Compara 2 cordinate 
 </summary>
	<param name="c1">Cordinata X</param>
	<param name="c2">Cordinata Y</param>
	<returns>Maggiore di 1 se x viene prima di y, 0 se sono allo stesso livello, altrimenti minore di 1 se y viene prima di x</returns>
</member><member name="T:GridBasedLibrary.LinearCoordComparer">
	<summary>
 Rappresenta un comparatore lineare
 </summary>
</member><member name="F:GridBasedLibrary.HSMapClient.RenderGrid">
	<summary>
 Ottiene o imposta il selecter che contiene i punti da renderizzare
 </summary>
</member><member name="M:GridBasedLibrary.HSMapClient.#ctor(System.Int32,System.Int32,System.UInt32,System.UInt32)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="x">Cordinata X</param>
	<param name="y">Cordinata Y</param>
	<param name="width">Larghezza della mappa</param>
	<param name="height">Altezza della mappa</param>
</member><member name="M:GridBasedLibrary.HSMapClient.#ctor(System.Int32,System.Int32,System.UInt32,System.UInt32,GridBasedLibrary.ITile)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="x">Cordinata X</param>
	<param name="y">Cordinata Y</param>
	<param name="width">Larghezza della mappa</param>
	<param name="height">Altezza della mappa</param>
	<param name="defaultTile">Tile di default</param>
</member><member name="M:GridBasedLibrary.HSMapClient.#ctor(GridBasedLibrary.Coord,GridBasedLibrary.Size)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="c">Cordinata della mappa</param>
	<param name="size">Dimensioni della mappa</param>
</member><member name="M:GridBasedLibrary.HSMapClient.#ctor(GridBasedLibrary.Coord,GridBasedLibrary.Size,GridBasedLibrary.ITile)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="c">Cordinata della mappa</param>
	<param name="size">Dimensioni della mappa</param>
	<param name="defaultTile">Tile di default</param>
</member><member name="M:GridBasedLibrary.HSMapClient.#ctor(GridBasedLibrary.ILocated,GridBasedLibrary.Size)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="c">Cordinata della mappa</param>
	<param name="size">Dimensioni della mappa</param>
</member><member name="M:GridBasedLibrary.HSMapClient.#ctor(GridBasedLibrary.ILocated,GridBasedLibrary.Size,GridBasedLibrary.ITile)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="c">Cordinata della mappa</param>
	<param name="size">Dimensioni della mappa</param>
	<param name="defaultTile">Tile di default</param>
</member><member name="M:GridBasedLibrary.HSMapClient.#ctor(GridBasedLibrary.Rectangle)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="reg">Regione della mappa</param>
</member><member name="M:GridBasedLibrary.HSMapClient.#ctor(GridBasedLibrary.Rectangle,GridBasedLibrary.ITile)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="reg">Regione della mappa</param>
	<param name="defaultTile">Tile di default</param>
</member><member name="M:GridBasedLibrary.HSMapClient.CreateHSMapClient(System.Int32,System.Int32,System.UInt32,System.UInt32)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="x">Cordinata X</param>
	<param name="y">Cordinata Y</param>
	<param name="width">Larghezza della mappa</param>
	<param name="height">Altezza della mappa</param>
</member><member name="M:GridBasedLibrary.HSMapClient.CreateHSMapClient(System.Int32,System.Int32,System.UInt32,System.UInt32,GridBasedLibrary.ITile)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="x">Cordinata X</param>
	<param name="y">Cordinata Y</param>
	<param name="width">Larghezza della mappa</param>
	<param name="height">Altezza della mappa</param>
	<param name="defaultTile">Tile di default</param>
</member><member name="M:GridBasedLibrary.HSMapClient.CreateHSMapClient(GridBasedLibrary.Coord,GridBasedLibrary.Size)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="c">Cordinata della mappa</param>
	<param name="size">Dimensioni della mappa</param>
</member><member name="M:GridBasedLibrary.HSMapClient.CreateHSMapClient(GridBasedLibrary.Coord,GridBasedLibrary.Size,GridBasedLibrary.ITile)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="c">Cordinata della mappa</param>
	<param name="size">Dimensioni della mappa</param>
	<param name="defaultTile">Tile di default</param>
</member><member name="M:GridBasedLibrary.HSMapClient.CreateHSMapClient(GridBasedLibrary.ILocated,GridBasedLibrary.Size)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="c">Cordinata della mappa</param>
	<param name="size">Dimensioni della mappa</param>
</member><member name="M:GridBasedLibrary.HSMapClient.CreateHSMapClient(GridBasedLibrary.ILocated,GridBasedLibrary.Size,GridBasedLibrary.ITile)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="c">Cordinata della mappa</param>
	<param name="size">Dimensioni della mappa</param>
	<param name="defaultTile">Tile di default</param>
</member><member name="M:GridBasedLibrary.HSMapClient.CreateHSMapClient(GridBasedLibrary.Rectangle)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="reg">Regione della mappa</param>
</member><member name="M:GridBasedLibrary.HSMapClient.CreateHSMapClient(GridBasedLibrary.Rectangle,GridBasedLibrary.ITile)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="reg">Regione della mappa</param>
	<param name="defaultTile">Tile di default</param>
</member><member name="M:GridBasedLibrary.HSMapClient.CanRenderUpdate(GridBasedLibrary.ILocated)">
	<summary>
 Restituisce true se c deve essere renderizzato
 </summary>
	<param name="c">Cordinata da verificare</param>
	<returns>True se deve essere re-renderizzato</returns>
</member><member name="M:GridBasedLibrary.HSMapClient.CanRenderUpdate(System.Int32,System.Int32)">
	<summary>
 Restituisce true se c deve essere renderizzato
 </summary>
	<param name="x">Cordinata X</param>
	<param name="y">Cordinata Y</param>
	<returns>True se deve essere re-renderizzato</returns>
</member><member name="M:GridBasedLibrary.HSMapClient.GetRenderUpdateCoords">
	<summary>
 Restituisce le cordinata da renderizzaare
 </summary>
	<returns>Cordinate da renderizzare</returns>
</member><member name="M:GridBasedLibrary.HSMapClient.RemoveRenderFlag(GridBasedLibrary.ILocated)">
	<summary>
 Rimuove la renderflag dalla cordinata
 </summary>
	<param name="c">Cordinata di cui rimuovere la renderflag</param>
</member><member name="M:GridBasedLibrary.HSMapClient.RemoveRenderFlag(GridBasedLibrary.ILocated[])">
	<summary>
 Rimuove la renderflag dalla cordinate
 </summary>
	<param name="c">Cordinate di cui rimuovere la renderflag</param>
</member><member name="M:GridBasedLibrary.HSMapClient.RemoveRenderFlag(System.Int32,System.Int32)">
	<summary>
 Rimuove la renderflag dalla cordinata
 </summary>
	<param name="x">Cordinata X</param>
	<param name="y">Cordinata Y</param>
</member><member name="M:GridBasedLibrary.HSMapClient.SetRenderFlag(GridBasedLibrary.ILocated)">
	<summary>
 Imposta la render flag
 </summary>
	<param name="c">Cordinata da renderizzare</param>
</member><member name="M:GridBasedLibrary.HSMapClient.SetRenderFlag(GridBasedLibrary.ILocated[])">
	<summary>
 Imposta la render flag
 </summary>
	<param name="c">Cordinate da renderizzare</param>
</member><member name="M:GridBasedLibrary.HSMapClient.SetRenderFlag(System.Int32,System.Int32)">
	<summary>
 Imposta la render flag
 </summary>
	<param name="x">Cordinata X</param>
	<param name="y">Cordinata Y</param>
</member><member name="M:GridBasedLibrary.HSMapClient.IsRenderEqual(GridBasedLibrary.HSMapTileClient,GridBasedLibrary.HSMapTileClient)">
	<summary>
 Verifica che dal punto di vista del rendering sono uguali
 </summary>
	<param name="MapTile1">Primo MapTile</param>
	<param name="MapTile2">Secondo MapTile</param>
	<returns>True se sono uguali</returns>
</member><member name="M:GridBasedLibrary.HSMapClient.GetEnumerator">
	<summary>
 Restituisce l'enumeratore dell'elenco di tile da renderizzare
 </summary>
	<returns>Enumeratore dell'elenco di tile da renderizzare</returns>
</member><member name="M:GridBasedLibrary.HSMapClient.GetEnumerator1">
	<summary>
 Restituisce l'enumeratore dell'elenco di tile da renderizzare
 </summary>
	<returns>Enumeratore dell'elenco di tile da renderizzare</returns>
</member><member name="M:GridBasedLibrary.HSMapClient.NotifyChange(GridBasedLibrary.IActor,GridBasedLibrary.IMapTile,GridBasedLibrary.IMapTile)">
	<summary>
 Viene notificato a IMap che l'attore ha cambiato posizione
 </summary>
	<param name="act">Attore che si è spostato</param>
	<param name="src">Sorgente</param>
	<param name="dest">Destinazione</param>
</member><member name="T:GridBasedLibrary.HSMapClient">
	<summary>
 Rappresenta una mappa usata dal lato client
 </summary>
</member><member name="F:GridBasedLibrary.Rectangle.SelectionRectangleMode.NONE">
	<summary>
 Non seleziona nulla
 </summary>
</member><member name="F:GridBasedLibrary.Rectangle.SelectionRectangleMode.PERIMETER">
	<summary>
 Seleziona il perimetro del rettangolo(interno)
 </summary>
</member><member name="F:GridBasedLibrary.Rectangle.SelectionRectangleMode.INTERNAL_AREA">
	<summary>
 Seleziona l'area interna del rettangolo
 </summary>
</member><member name="F:GridBasedLibrary.Rectangle.SelectionRectangleMode.AREA">
	<summary>
 Seleziona tutta l'area del rettangolo
 </summary>
</member><member name="T:GridBasedLibrary.Rectangle.SelectionRectangleMode">
	<summary>
 Elenco di costanti che identificano il modo di scegliere le cordinate(celle) del rettangolo
 </summary>
</member><member name="F:GridBasedLibrary.Rectangle.size">
	<summary>
 Ottiene o imposta le dimensioni del rettangolo
 </summary>
</member><member name="M:GridBasedLibrary.Rectangle.#ctor(System.Int32,System.Int32,System.UInt32,System.UInt32)">
	<summary>
 Crea una nuova istanza di rectangle
 </summary>
	<param name="X">Locazione X</param>
	<param name="Y">Locazione Y</param>
	<param name="Width">Larghezza</param>
	<param name="Height">Altezza</param>
</member><member name="M:GridBasedLibrary.Rectangle.#ctor(GridBasedLibrary.Coord,GridBasedLibrary.Size)">
	<summary>
 Crea una nuova istanza di rectangle
 </summary>
	<param name="location">Locazione del rettangolo</param>
	<param name="size">Dimensioni del rettangolo</param>
</member><member name="M:GridBasedLibrary.Rectangle.#ctor(GridBasedLibrary.ILocated,GridBasedLibrary.Size)">
	<summary>
 Crea una nuova istanza di rectangle
 </summary>
	<param name="location">Locazione del rettangolo</param>
	<param name="size">Dimensioni del rettangolo</param>
</member><member name="M:GridBasedLibrary.Rectangle.#ctor(GridBasedLibrary.Rectangle)">
	<summary>
 Crea una nuova istanza di rectangle
 </summary>
	<param name="src">Rettangolo sorgente</param>
</member><member name="M:GridBasedLibrary.Rectangle.GetWidth">
	<summary>
 Ottiene la larghezza del rettangolo
 </summary>
	<returns>La larghezza</returns>
</member><member name="M:GridBasedLibrary.Rectangle.GetHeight">
	<summary>
 Ottiene l'altezza del rettangolo
 </summary>
	<returns>L'altezza</returns>
</member><member name="M:GridBasedLibrary.Rectangle.GetSize">
	<summary>
 Ottiene le dimensioni di default del rettangolo
 </summary>
	<returns>Le dimensioni</returns>
</member><member name="M:GridBasedLibrary.Rectangle.SetWidth(System.UInt32)">
	<summary>
 Imposta la larghezza del rettangolo
 </summary>
	<param name="value">Valore da impostare</param>
</member><member name="M:GridBasedLibrary.Rectangle.SetHeight(System.UInt32)">
	<summary>
 Imposta l'altezza del rettangolo
 </summary>
	<param name="value">Valore</param>
</member><member name="M:GridBasedLibrary.Rectangle.SetSize(GridBasedLibrary.Size)">
	<summary>
 Imposta le dimensioni del rettangolo
 </summary>
	<param name="value">Nuove dimensioni</param>
</member><member name="M:GridBasedLibrary.Rectangle.SetSize(System.UInt32,System.UInt32)">
	<summary>
 Imposta le dimensioni del rettangolo
 </summary>
	<param name="width">La nuova larghezza</param>
	<param name="height">La nuova altezza</param>
</member><member name="M:GridBasedLibrary.Rectangle.SelectRectangleRegion(GridBasedLibrary.Rectangle.SelectionRectangleMode,GridBasedLibrary.ICoordSelecter,System.Boolean)">
	<summary>
 Seleziona determinate zone del rettangolo
 </summary>
	<param name="mode">Modalità di selezione</param>
	<param name="selRes">Selecter da usare</param>
	<param name="deSelectAll">Se deselezionare tutti i punti in selRes prima di eseguire il metodo</param>
	<remarks>Il parametro mode supporta più opzioni</remarks>
</member><member name="M:GridBasedLibrary.Rectangle.Contains(System.Int32,System.Int32)">
	<summary>
 Verifica se il rettangolo contiene il punto
 </summary>
	<param name="x">Cordinata x</param>
	<param name="y">Cordinata y</param>
	<returns>True se contiene il punto, altrimenti false</returns>
</member><member name="M:GridBasedLibrary.Rectangle.Contains(GridBasedLibrary.Coord)">
	<summary>
 Verifica se il rettangolo contiene il punto
 </summary>
	<param name="c">Cordinata da verificare</param>
	<returns>True se contiene il punto, altrimenti false</returns>
</member><member name="M:GridBasedLibrary.Rectangle.Contains(GridBasedLibrary.ILocated)">
	<summary>
 Verifica se il rettangolo contiene il punto
 </summary>
	<param name="c">Cordinata da verificare</param>
	<returns>True se contiene il punto, altrimenti false</returns>
</member><member name="T:GridBasedLibrary.Rectangle">
	<summary>
 Rappresenta un rettangolo
 </summary>
</member><member name="F:GridBasedLibrary.RadialCoordComparer.scale">
	<summary>
 Ottiene o imposta il valore di scala da usare nelle comparazioni
 </summary>
</member><member name="F:GridBasedLibrary.RadialCoordComparer.centerCoord">
	<summary>
 Ottiene o imposta il punto centrale da usare nelle comparazioni
 </summary>
</member><member name="F:GridBasedLibrary.RadialCoordComparer.distanceFunction">
	<summary>
 Funzione che calcola la distanza
 </summary>
</member><member name="M:GridBasedLibrary.RadialCoordComparer.#ctor(GridBasedLibrary.Coord,GridBasedLibrary.ICoordDistanceFunction,System.Single)">
	<summary>
 Crea una nuova istanza di RadialCoordComparer
 </summary>
	<param name="centerCoord">Punto centrale</param>
	<param name="scale">Valore di scala da usare</param>
	<param name="distanceFunction">Funzione per il calcolo della distanza</param>
	<remarks>Usare un valore di scala negativo per ottenere i punti comparati dal più lontani ai più vicini di centerCoord</remarks>
</member><member name="M:GridBasedLibrary.RadialCoordComparer.#ctor(GridBasedLibrary.ILocated,GridBasedLibrary.ICoordDistanceFunction,System.Single)">
	<summary>
 Crea una nuova istanza di RadialCoordComparer
 </summary>
	<param name="centerCoord">Punto centrale</param>
	<param name="scale">Valore di scala da usare</param>
	<param name="distanceFunction">Funzione per il calcolo della distanza</param>
	<remarks>Usare un valore di scala negativo per ottenere i punti comparati dal più lontani ai più vicini di centerCoord</remarks>
</member><member name="M:GridBasedLibrary.RadialCoordComparer.#ctor(System.Int32,System.Int32,GridBasedLibrary.ICoordDistanceFunction,System.Single)">
	<summary>
 Crea una nuova istanza di RadialCoordComparer
 </summary>
	<param name="centerCoordX">Cordinata x del punto centrale</param>
	<param name="centerCoordY">Cordinata y del punto centrale</param>
	<param name="scale">Valore di scala da usare</param>
	<param name="distanceFunction">Funzione per il calcolo della distanza</param>
	<remarks>Usare un valore di scala negativo per ottenere i punti comparati dal più lontani ai più vicini di centerCoord</remarks>
</member><member name="M:GridBasedLibrary.RadialCoordComparer.GetCenterCoord">
	<summary>
 Restituisce il punto centrale
 </summary>
	<returns>Il punto centrale</returns>
</member><member name="M:GridBasedLibrary.RadialCoordComparer.GetDistanceFunction">
	<summary>
 Restituisce la funzione per il calcolo della distanza
 </summary>
	<returns>La funzione per il calcolo della distanza</returns>
</member><member name="M:GridBasedLibrary.RadialCoordComparer.GetScale">
	<summary>
 Restituisce il valore di scala per la DistanceFunction
 </summary>
	<returns>Il valore di scala</returns>
</member><member name="M:GridBasedLibrary.RadialCoordComparer.SetCenterCoord(GridBasedLibrary.Coord)">
	<summary>
 Imposta il punto centrale
 </summary>
	<param name="value">Cordinata da usare</param>
</member><member name="M:GridBasedLibrary.RadialCoordComparer.SetDistanceFunction(GridBasedLibrary.ICoordDistanceFunction)">
	<summary>
 Imposta la funzione per la distanza
 </summary>
	<param name="value">DistanceFunction da usare</param>
</member><member name="M:GridBasedLibrary.RadialCoordComparer.SetScale(System.Single)">
	<summary>
 Imposta il valore di scala
 </summary>
	<param name="value">Valore di scala da usare</param>
</member><member name="M:GridBasedLibrary.RadialCoordComparer.Compare(GridBasedLibrary.ILocated,GridBasedLibrary.ILocated)">
	<summary>
 Compara 2 cordinate 
 </summary>
	<param name="c1">Cordinata X</param>
	<param name="c2">Cordinata Y</param>
	<returns>Maggiore di 1 se x viene prima di y, 0 se sono allo stesso livello, altrimenti minore di 1 se y viene prima di x</returns>
</member><member name="T:GridBasedLibrary.RadialCoordComparer">
	<summary>
 Rappresenta un comparatore radiale
 </summary>
</member><member name="M:GridBasedLibrary.IMapClient.SetRenderFlag(GridBasedLibrary.ILocated)">
	<summary>
 Imposta la flag per il rendering
 </summary>
	<param name="c">Cordinata da settare</param>
</member><member name="M:GridBasedLibrary.IMapClient.SetRenderFlag(System.Int32,System.Int32)">
	<summary>
 Imposta la flag per il rendering
 </summary>
	<param name="x">Cordinata X da settare</param>
	<param name="y">Cordinata Y da settare</param>
</member><member name="M:GridBasedLibrary.IMapClient.SetRenderFlag(GridBasedLibrary.ILocated[])">
	<summary>
 Imposta la flag per il rendering
 </summary>
	<param name="c">Cordinate da settare</param>
</member><member name="M:GridBasedLibrary.IMapClient.RemoveRenderFlag(GridBasedLibrary.ILocated)">
	<summary>
 Rimuove la flag per il rendering
 </summary>
	<param name="c">Cordinata da desettare</param>
</member><member name="M:GridBasedLibrary.IMapClient.RemoveRenderFlag(System.Int32,System.Int32)">
	<summary>
 Rimuove la flag per il rendering
 </summary>
	<param name="x">Cordinata X da desettare</param>
	<param name="y">Cordinata Y da desettare</param>
</member><member name="M:GridBasedLibrary.IMapClient.RemoveRenderFlag(GridBasedLibrary.ILocated[])">
	<summary>
 Rimuove la flag per il rendering
 </summary>
	<param name="c">Cordinate da desettare</param>
</member><member name="M:GridBasedLibrary.IMapClient.CanRenderUpdate(GridBasedLibrary.ILocated)">
	<summary>
 Verifica se la cordinata deve essere ri-renderizzata
 </summary>
	<param name="c">Cordinata da verificare</param>
	<returns>True se deve essere ri-renderizzata</returns>
</member><member name="M:GridBasedLibrary.IMapClient.CanRenderUpdate(System.Int32,System.Int32)">
	<summary>
 Verifica se la cordinata deve essere ri-renderizzata
 </summary>
	<param name="x">Cordinata X da verificare</param>
	<param name="y">Cordinata Y da verificare</param>
	<returns>True se deve essere ri-renderizzata</returns>
</member><member name="M:GridBasedLibrary.IMapClient.GetRenderUpdateCoords">
	<summary>
 Restituisce l'elenco di punti che devono essere ri-renderizzati
 </summary>
	<returns>Cordinate che devono ri-renderizzate</returns>
</member><member name="T:GridBasedLibrary.IMapClient">
	<summary>
 Rappresenta una mappa usata nelle applicazioni client(dove è richiesto un rendering)
 </summary>
</member><member name="M:GridBasedLibrary.ISizeableRange.SetMin(System.Int32)">
	<summary>
 Imposta il valore minimo
 </summary>
	<param name="value">Valore da impostare</param>
</member><member name="M:GridBasedLibrary.ISizeableRange.SetMax(System.Int32)">
	<summary>
 Imposta il valore massimo
 </summary>
	<param name="value">Valore da impostare</param>
</member><member name="M:GridBasedLibrary.ISizeableRange.Set(System.Int32,System.Int32)">
	<summary>
 Imposta il valore minimo e massimo
 </summary>
	<param name="min">Il valore minimo</param>
	<param name="max">Il valore massimo</param>
</member><member name="M:GridBasedLibrary.ISizeableRange.Set(GridBasedLibrary.IRange)">
	<summary>
 Imposta il valore minimo e massimo
 </summary>
	<param name="range">Range</param>
</member><member name="M:GridBasedLibrary.ISizeableRange.Extend(System.Int32)">
	<summary>
 Il range viene esteso in entrambi limiti di offset
 </summary>
	<param name="Offset">Dimensioni di estensioni</param>
	<remarks>Viene esteso in entrambi i limiti in modo equo</remarks>
	<exception cref="T:System.OverflowException">Quando Max+Offset/2 sono maggiori di <see cref="T:System.Int32">Integer.MaxValue</see>
 oppure Min-offset/2 è minore di <see cref="T:System.Int32">Integer.MinValue</see></exception>
</member><member name="M:GridBasedLibrary.ISizeableRange.Extend(System.Int32,System.Int32)">
	<summary>
 Il range viene esteso in entrambi limiti di offset
 </summary>
	<param name="LimitMinOffset">Estensione al limite inferiore</param>
	<param name="LimitMaxOffset">Estensione al limite superiore</param>
	<exception cref="T:System.OverflowException">Quando Max+Offset/2 sono maggiori di <see cref="T:System.Int32">Integer.MaxValue</see>
 oppure Min-offset/2 è minore di <see cref="T:System.Int32">Integer.MinValue</see></exception>
</member><member name="T:GridBasedLibrary.ISizeableRange">
	<summary>
 Rappresenta un range i grado di modificare i propri limiti
 </summary>
</member><member name="F:GridBasedLibrary.AStarPathFinder.ClosedNodes">
	<summary>
 Ottiene o imposta i punti chiusi
 </summary>
</member><member name="F:GridBasedLibrary.AStarPathFinder.OpenNodes">
	<summary>
 Ottiene o imposta la lista di nodi aperti
 </summary>
	<remarks>Un implementazione migliore sarebbe i prority queue</remarks>
</member><member name="F:GridBasedLibrary.AStarPathFinder.Nodes">
	<summary>
 Ottiene o imposta i nodi 
 </summary>
</member><member name="F:GridBasedLibrary.AStarPathFinder.DirVector">
	<summary>
 Ottiene o imposta il vettore che contiene la lista di nodi
 </summary>
</member><member name="F:GridBasedLibrary.AStarPathFinder.heuristicFunction">
	<summary>
 Ottiene o imposta la funzione euristica usata
 </summary>
</member><member name="F:GridBasedLibrary.AStarPathFinder.scale">
	<summary>
 Ottiene o imposta il valore di scala
 </summary>
</member><member name="M:GridBasedLibrary.AStarPathFinder.#ctor(GridBasedLibrary.ActorDirections,GridBasedLibrary.ICoordDistanceFunction,System.Single)">
	<summary>
 Crea una nuova istanza di AStarPathFinder
 </summary>
	<param name="actDirections">Direzione che gli attori sono in grado di fare</param>
</member><member name="M:GridBasedLibrary.AStarPathFinder.Find">
	<summary>
 Cerca il percorso
 </summary>
	<returns>Percorso da trovare</returns>
</member><member name="M:GridBasedLibrary.AStarPathFinder.Init">
	<summary>
 Inizializza le strutture dati usati nella ricerca
 </summary>
</member><member name="M:GridBasedLibrary.AStarPathFinder.StartFind">
	<summary>
 Inizia la ricerca
 </summary>
</member><member name="M:GridBasedLibrary.AStarPathFinder.ExpandNode(GridBasedLibrary.Coord)">
	<summary>
 Espande il nodo corrente ai sui vicini
 </summary>
	<param name="currentNode">Nodo corrente da espandere</param>
</member><member name="M:GridBasedLibrary.AStarPathFinder.ReconstructPath">
	<summary>
 Restituisce il percorso completo a ritroso
 </summary>
	<returns>Il percorso completo</returns>
	<remarks>Si poteva implementare in maniera ricorsiva ma è meglio cosi per i percorsi lunghi che saturano lo stack</remarks>
</member><member name="M:GridBasedLibrary.AStarPathFinder.SetScoreG(GridBasedLibrary.ILocated,System.Single)">
	<summary>
 Imposta il punteggio G associato
 </summary>
	<param name="val">Valore da impostare</param>
	<param name="c">Cordinata del punto</param>
</member><member name="M:GridBasedLibrary.AStarPathFinder.SetScoreH(GridBasedLibrary.ILocated,System.Single)">
	<summary>
 Imposta il punteggio G associato
 </summary>
	<param name="val">Valore da impostare</param>
	<param name="c">Cordinata del punto</param>
</member><member name="M:GridBasedLibrary.AStarPathFinder.SetCameFrom(GridBasedLibrary.ILocated,GridBasedLibrary.ILocated)">
	<summary>
 Imposta il punto di provenienza
 </summary>
	<param name="cf">Punto di provenienza</param>
	<param name="c">Cordinata del punto</param>
</member><member name="M:GridBasedLibrary.AStarPathFinder.SetCameFrom(GridBasedLibrary.ILocated,System.Int32,System.Int32)">
	<summary>
 Imposta il punto di provenienza
 </summary>
	<param name="x">Cordinata X del punto di provenienza</param>
	<param name="y">Cordinata Y del punto di provenienza</param>
	<param name="c">Cordinata del punto</param>
</member><member name="M:GridBasedLibrary.AStarPathFinder.SetScoreG(System.Int32,System.Int32,System.Single)">
	<summary>
 Imposta il punteggio G associato
 </summary>
	<param name="val">Valore da impostare</param>
	<param name="cX">Cordinata X del nodo</param>
	<param name="cY">Cordinata Y del nodo</param>
</member><member name="M:GridBasedLibrary.AStarPathFinder.SetScoreH(System.Int32,System.Int32,System.Single)">
	<summary>
 Imposta il punteggio G associato
 </summary>
	<param name="val">Valore da impostare</param>
	<param name="cX">Cordinata X del nodo</param>
	<param name="cY">Cordinata Y del nodo</param>
</member><member name="M:GridBasedLibrary.AStarPathFinder.SetCameFrom(System.Int32,System.Int32,GridBasedLibrary.ILocated)">
	<summary>
 Imposta il punto di provenienza
 </summary>
	<param name="cf">Punto di provenienza</param>
	<param name="cX">Cordinata X del nodo</param>
	<param name="cY">Cordinata Y del nodo</param>
</member><member name="M:GridBasedLibrary.AStarPathFinder.SetCameFrom(System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
 Imposta il punto di provenienza
 </summary>
	<param name="x">Cordinata X del punto di provenienza</param>
	<param name="y">Cordinata Y del punto di provenienza</param>
	<param name="cX">Cordinata X del nodo</param>
	<param name="cY">Cordinata Y del nodo</param>
</member><member name="M:GridBasedLibrary.AStarPathFinder.GetScoreG(GridBasedLibrary.ILocated)">
	<summary>
 Restituisce il punteggio G
 </summary>
	<returns>Punteggio G</returns>
	<param name="c">Cordinata del punto</param>
</member><member name="M:GridBasedLibrary.AStarPathFinder.GetScoreH(GridBasedLibrary.ILocated)">
	<summary>
 Restituisce il punteggio H
 </summary>
	<returns>Punteggio H</returns>
	<param name="c">Cordinata del punto</param>
</member><member name="M:GridBasedLibrary.AStarPathFinder.GetScoreF(GridBasedLibrary.ILocated)">
	<summary>
 Restituisce il punteggio F
 </summary>
	<param name="c">Cordinata del punto</param>
	<returns>Punteggio F</returns>
</member><member name="M:GridBasedLibrary.AStarPathFinder.GetCameFrom(GridBasedLibrary.ILocated)">
	<summary>
 Restituisce il punto di provenienza
 </summary>
	<param name="c">Cordinata del punto</param>
	<returns>Cordinata di provenienza</returns>
</member><member name="M:GridBasedLibrary.AStarPathFinder.GetScoreG(System.Int32,System.Int32)">
	<summary>
 Restituisce il punteggio G
 </summary>
	<returns>Punteggio G</returns>
	<param name="cX">Cordinata X del nodo</param>
	<param name="cY">Cordinata Y del nodo</param>
</member><member name="M:GridBasedLibrary.AStarPathFinder.GetScoreH(System.Int32,System.Int32)">
	<summary>
 Restituisce il punteggio H
 </summary>
	<returns>Punteggio H</returns>
	<param name="cX">Cordinata X del nodo</param>
	<param name="cY">Cordinata Y del nodo</param>
</member><member name="M:GridBasedLibrary.AStarPathFinder.GetScoreF(System.Int32,System.Int32)">
	<summary>
 Restituisce il punteggio F
 </summary>
	<param name="cX">Cordinata X del nodo</param>
	<param name="cY">Cordinata Y del nodo</param>
	<returns>Punteggio F</returns>
</member><member name="M:GridBasedLibrary.AStarPathFinder.GetCameFrom(System.Int32,System.Int32)">
	<summary>
 Restituisce il punto di provenienza
 </summary>
	<param name="cX">Cordinata X del nodo</param>
	<param name="cY">Cordinata Y del nodo</param>
	<returns>Cordinata di provenienza</returns>
</member><member name="M:GridBasedLibrary.AStarPathFinder.GetLowestScoreNodeIndex">
	<summary>
 Ottiene o imposta indice del nodo in OpenNodes con il minor punteggio
 </summary>
	<returns>Il nodo con il minor numero F</returns>
</member><member name="T:GridBasedLibrary.AStarPathFinder">
	<summary>
 Rappresenta un cercatore di percorsi che utilizza l'algoritmo A*
 </summary>
	<remarks>Utilizza algoritmo A*</remarks>
</member><member name="F:GridBasedLibrary.GridListCoordSelecter.grid">
	<summary>
 Rappresenta la mappa delle cordinate selezionate e non
 </summary>
</member><member name="F:GridBasedLibrary.GridListCoordSelecter.list">
	<summary>
 Rappresenta l'elenco di cordinate selezionate
 </summary>
</member><member name="F:GridBasedLibrary.GridListCoordSelecter.region">
	<summary>
 Regione dove è possibile selezionare le cordinate
 </summary>
</member><member name="F:GridBasedLibrary.GridListCoordSelecter.ignoreOverPoint">
	<summary>
 Ottiene o imposta un valore che indica se ignorare i punti fuori dall' area
 </summary>
</member><member name="M:GridBasedLibrary.GridListCoordSelecter.#ctor(GridBasedLibrary.Rectangle,System.Boolean)">
	<summary>
 Crea una nuova di GridListCoordSelecter
 </summary>
	<param name="region">Regione</param>
	<param name="ignoreOverPoint">Opzione che indica se ignorare il punti fuori dal rettangolo o lanciare un eccezione</param>
</member><member name="M:GridBasedLibrary.GridListCoordSelecter.#ctor(GridBasedLibrary.Coord,GridBasedLibrary.Size,System.Boolean)">
	<summary>
 Crea una nuova di GridListCoordSelecter
 </summary>
	<param name="offset">Locazione della regione</param>
	<param name="size">Dimensione della regione</param>
	<param name="ignoreOverPoint">Opzione che indica se ignorare il punti fuori dal rettangolo o lanciare un eccezione</param>
</member><member name="M:GridBasedLibrary.GridListCoordSelecter.#ctor(GridBasedLibrary.ILocated,GridBasedLibrary.Size,System.Boolean)">
	<summary>
 Crea una nuova di GridListCoordSelecter
 </summary>
	<param name="offset">Locazione della regione</param>
	<param name="size">Dimensione della regione</param>
	<param name="ignoreOverPoint">Opzione che indica se ignorare il punti fuori dal rettangolo o lanciare un eccezione</param>
</member><member name="M:GridBasedLibrary.GridListCoordSelecter.#ctor(System.Int32,System.Int32,System.UInt32,System.UInt32,System.Boolean)">
	<summary>
 Crea una nuova di GridCoordSelecter
 </summary>
	<param name="offX">Offset X</param>
	<param name="offY">Offset Y</param>
	<param name="width">Larghezza</param>
	<param name="height">Altezza</param>
	<param name="ignoreOverPoint">Opzione che indica se ignorare il punti fuori dal rettangolo o lanciare un eccezione</param>
</member><member name="M:GridBasedLibrary.GridListCoordSelecter.Select(GridBasedLibrary.ILocated)">
	<summary>
 Seleziona una cordinata
 </summary>
	<param name="c">Cordinata da selezionare</param>
</member><member name="M:GridBasedLibrary.GridListCoordSelecter.Select(System.Int32,System.Int32)">
	<summary>
 Seleziona una cordinata
 </summary>
	<param name="x">Cordinata x</param>
	<param name="y">Cordinata y</param>
</member><member name="M:GridBasedLibrary.GridListCoordSelecter.DeSelect(GridBasedLibrary.ILocated)">
	<summary>
 Deseleziona una cordinata
 </summary>
	<param name="c">Cordinata da deselezionare</param>
</member><member name="M:GridBasedLibrary.GridListCoordSelecter.DeSelect(System.Int32,System.Int32)">
	<summary>
 Deseleziona una cordinata
 </summary>
	<param name="x">Cordinata x</param>
	<param name="y">Cordinata y</param>
</member><member name="M:GridBasedLibrary.GridListCoordSelecter.DeSelectAll">
	<summary>
 Deseleziona tutte le cordinate
 </summary>
</member><member name="M:GridBasedLibrary.GridListCoordSelecter.GetSelection">
	<summary>
 Ottiene le cordinate selezionate
 </summary>
	<returns>Cordinate selezionate</returns>
</member><member name="M:GridBasedLibrary.GridListCoordSelecter.IsSelected(GridBasedLibrary.ILocated)">
	<summary>
 Verifica se è selezionata una cordinata
 </summary>
	<param name="c">Cordinata da verificare</param>
</member><member name="M:GridBasedLibrary.GridListCoordSelecter.IsSelected(System.Int32,System.Int32)">
	<summary>
 Verifica se è selezionata una cordinata
 </summary>
	<param name="x">Cordinata x</param>
	<param name="y">Cordinata y</param>
</member><member name="M:GridBasedLibrary.GridListCoordSelecter.GetEnumerator">
	<summary>
 Restituisce l'enumeratore usato da questa classe
 </summary>
	<returns>Enumeratore usato</returns>
</member><member name="M:GridBasedLibrary.GridListCoordSelecter.GetEnumerator1">
	<summary>
 Restituisce l'enumeratore usato da questa classe
 </summary>
	<returns>Enumeratore usato</returns>
</member><member name="F:GridBasedLibrary.GridListCoordSelecter.GridListCoordSelectionEnumerator.ListSelecter">
	<summary>
 Ottiene o imposta il selecter
 </summary>
</member><member name="F:GridBasedLibrary.GridListCoordSelecter.GridListCoordSelectionEnumerator.index">
	<summary>
 Ottiene o imposta l'indice corrente
 </summary>
</member><member name="F:GridBasedLibrary.GridListCoordSelecter.GridListCoordSelectionEnumerator.initialIndex">
	<summary>
 Indica se l'indice è iniziale(0)
 </summary>
</member><member name="M:GridBasedLibrary.GridListCoordSelecter.GridListCoordSelectionEnumerator.#ctor(GridBasedLibrary.GridListCoordSelecter)">
	<summary>
 Crea una nuova istanza di GridListCoordSelectionEnumerator
 </summary>
	<param name="Sel">Selecter</param>
</member><member name="P:GridBasedLibrary.GridListCoordSelecter.GridListCoordSelectionEnumerator.Current">
	<summary>
 Ottiene l'elemento corrente
 </summary>
	<value>Elemento corrente</value>
	<returns>Elemento corrente</returns>
</member><member name="P:GridBasedLibrary.GridListCoordSelecter.GridListCoordSelectionEnumerator.Current1">
	<summary>
 Ottiene l'elemento corrente
 </summary>
	<value>Elemento corrente</value>
	<returns>Elemento corrente</returns>
</member><member name="M:GridBasedLibrary.GridListCoordSelecter.GridListCoordSelectionEnumerator.MoveNext">
	<summary>
 Sposta in avanti la cordinata corrente
 </summary>
	<returns>True se è stato spostato con successo, altrimenti false</returns>
</member><member name="M:GridBasedLibrary.GridListCoordSelecter.GridListCoordSelectionEnumerator.Reset">
	<summary>
 Resetta la posizione di current
 </summary>
</member><member name="T:GridBasedLibrary.GridListCoordSelecter.GridListCoordSelectionEnumerator">
	<summary>
 Rappresenta un enumeratore usato da ListCoordSelecter
 </summary>
</member><member name="T:GridBasedLibrary.GridListCoordSelecter">
	<summary>
 Rappresenta un selecter che utilizza un algoritmo a lista con griglia
 </summary>
</member><member name="F:GridBasedLibrary.ManhattanDistanceFunction.DF">
	<summary>
 Ottiene o imposta una istanza di DistanceFunction
 </summary>
</member><member name="P:GridBasedLibrary.ManhattanDistanceFunction.DistanceFunction">
	<summary>
 Ottiene la funzione per il calcolo della distanza
 </summary>
	<value>La funzione per il calcolo della distanza</value>
	<returns>La funzione per il calcolo della distanza</returns>
</member><member name="M:GridBasedLibrary.ManhattanDistanceFunction.#ctor">
	<summary>
 Crea una nuova istanza di ManhattanDistanceFunction
 </summary>
</member><member name="M:GridBasedLibrary.ManhattanDistanceFunction.GetDistance(System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
	<summary>
 Calcola la distanza tra 1 e 2
 </summary>
	<param name="x1">Cordinata x del punto 1</param>
	<param name="y1">Cordinata y del punto 1</param>
	<param name="x2">Cordinata x del punto 2</param>
	<param name="y2">Cordinata y del punto 2</param>
	<param name="scale">Valore di scala</param>
	<returns>Un valore che indica la distanza (euristica) tra punto 1 e 2</returns>
</member><member name="M:GridBasedLibrary.ManhattanDistanceFunction.GetDistance(GridBasedLibrary.ILocated,GridBasedLibrary.ILocated,System.Single)">
	<summary>
 Calcola la distanza tra 1 e 2
 </summary>
	<param name="c1">Cordinata 1</param>
	<param name="c2">Cordinata 2</param>
	<param name="scale">Valore di scala</param>
	<returns>Un valore che indica la distanza (euristica) tra punto 1 e 2</returns>
</member><member name="T:GridBasedLibrary.ManhattanDistanceFunction">
	<summary>
 Rappresenta la funzione euristica che calcola la distanza con l'algoritmo di manatthan
 </summary>
</member><member name="F:GridBasedLibrary.HSMap.grid">
	<summary>
 Ottiene o imposta l'array che contiene la mappa
 </summary>
</member><member name="F:GridBasedLibrary.HSMap.region">
	<summary>
 Ottiene o imposta la regione
 </summary>
</member><member name="F:GridBasedLibrary.HSMap.defaultTile">
	<summary>
 Ottiene o imposta il default tile
 </summary>
</member><member name="F:GridBasedLibrary.HSMap.actorList">
	<summary>
 Ottiene o imposta la lista di attori
 </summary>
</member><member name="M:GridBasedLibrary.HSMap.#ctor(System.Int32,System.Int32,System.UInt32,System.UInt32)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="x">Cordinata X</param>
	<param name="y">Cordinata Y</param>
	<param name="width">Larghezza della mappa</param>
	<param name="height">Altezza della mappa</param>
</member><member name="M:GridBasedLibrary.HSMap.#ctor(System.Int32,System.Int32,System.UInt32,System.UInt32,GridBasedLibrary.ITile)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="x">Cordinata X</param>
	<param name="y">Cordinata Y</param>
	<param name="width">Larghezza della mappa</param>
	<param name="height">Altezza della mappa</param>
	<param name="defaultTile">Tile di default</param>
</member><member name="M:GridBasedLibrary.HSMap.#ctor(GridBasedLibrary.Coord,GridBasedLibrary.Size)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="c">Cordinata della mappa</param>
	<param name="size">Dimensioni della mappa</param>
</member><member name="M:GridBasedLibrary.HSMap.#ctor(GridBasedLibrary.Coord,GridBasedLibrary.Size,GridBasedLibrary.ITile)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="c">Cordinata della mappa</param>
	<param name="size">Dimensioni della mappa</param>
	<param name="defaultTile">Tile di default</param>
</member><member name="M:GridBasedLibrary.HSMap.#ctor(GridBasedLibrary.ILocated,GridBasedLibrary.Size)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="c">Cordinata della mappa</param>
	<param name="size">Dimensioni della mappa</param>
</member><member name="M:GridBasedLibrary.HSMap.#ctor(GridBasedLibrary.ILocated,GridBasedLibrary.Size,GridBasedLibrary.ITile)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="c">Cordinata della mappa</param>
	<param name="size">Dimensioni della mappa</param>
	<param name="defaultTile">Tile di default</param>
</member><member name="M:GridBasedLibrary.HSMap.#ctor(GridBasedLibrary.Rectangle)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="reg">Regione della mappa</param>
</member><member name="M:GridBasedLibrary.HSMap.#ctor(GridBasedLibrary.Rectangle,GridBasedLibrary.ITile)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="reg">Regione della mappa</param>
	<param name="defaultTile">Tile di default</param>
</member><member name="M:GridBasedLibrary.HSMap.CreateHSMap(System.Int32,System.Int32,System.UInt32,System.UInt32)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="x">Cordinata X</param>
	<param name="y">Cordinata Y</param>
	<param name="width">Larghezza della mappa</param>
	<param name="height">Altezza della mappa</param>
</member><member name="M:GridBasedLibrary.HSMap.CreateHSMap(System.Int32,System.Int32,System.UInt32,System.UInt32,GridBasedLibrary.ITile)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="x">Cordinata X</param>
	<param name="y">Cordinata Y</param>
	<param name="width">Larghezza della mappa</param>
	<param name="height">Altezza della mappa</param>
	<param name="defaultTile">Tile di default</param>
</member><member name="M:GridBasedLibrary.HSMap.CreateHSMap(GridBasedLibrary.Coord,GridBasedLibrary.Size)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="c">Cordinata della mappa</param>
	<param name="size">Dimensioni della mappa</param>
</member><member name="M:GridBasedLibrary.HSMap.CreateHSMap(GridBasedLibrary.Coord,GridBasedLibrary.Size,GridBasedLibrary.ITile)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="c">Cordinata della mappa</param>
	<param name="size">Dimensioni della mappa</param>
	<param name="defaultTile">Tile di default</param>
</member><member name="M:GridBasedLibrary.HSMap.CreateHSMap(GridBasedLibrary.ILocated,GridBasedLibrary.Size)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="c">Cordinata della mappa</param>
	<param name="size">Dimensioni della mappa</param>
</member><member name="M:GridBasedLibrary.HSMap.CreateHSMap(GridBasedLibrary.ILocated,GridBasedLibrary.Size,GridBasedLibrary.ITile)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="c">Cordinata della mappa</param>
	<param name="size">Dimensioni della mappa</param>
	<param name="defaultTile">Tile di default</param>
</member><member name="M:GridBasedLibrary.HSMap.CreateHSMap(GridBasedLibrary.Rectangle)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="reg">Regione della mappa</param>
</member><member name="M:GridBasedLibrary.HSMap.CreateHSMap(GridBasedLibrary.Rectangle,GridBasedLibrary.ITile)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="reg">Regione della mappa</param>
	<param name="defaultTile">Tile di default</param>
</member><member name="M:GridBasedLibrary.HSMap.GetMapTile(System.Int32,System.Int32)">
	<summary>
 Restituisce il MapTile che si trova alla cordinata specificata
 </summary>
	<param name="x">Cordinata x</param>
	<param name="y">Cordinata y</param>
	<returns>MapTile che si trova alla cordinata specificata. Nothing se non è stata trovata</returns>
</member><member name="M:GridBasedLibrary.HSMap.GetMapTile(GridBasedLibrary.ILocated)">
	<summary>
 Restituisce il MapTile che si trova alla cordinata specificata
 </summary>
	<param name="c">Cordinata</param>
	<returns>MapTile che si trova alla cordinata specificata</returns>
</member><member name="M:GridBasedLibrary.HSMap.GetTile(System.Int32,System.Int32)">
	<summary>
 Restituisce il Tile che si trova alla cordinata specificata
 </summary>
	<param name="x">Cordinata x</param>
	<param name="y">Cordinata y</param>
	<returns>MapTile che si trova alla cordinata specificata. DefaultTile se non è impostato alcuntile</returns>
</member><member name="M:GridBasedLibrary.HSMap.GetTile(GridBasedLibrary.ILocated)">
	<summary>
 Restituisce il Tile che si trova alla cordinata specificata
 </summary>
	<param name="c">Cordinata</param>
	<returns>MapTile che si trova alla cordinata specificata</returns>
</member><member name="M:GridBasedLibrary.HSMap.GetDefaultTile">
	<summary>
 Ottiene il tile di default usato nelle maptile senza tile
 </summary>
	<returns>Tile di default</returns>
</member><member name="M:GridBasedLibrary.HSMap.GetMapSize">
	<summary>
 Restituisce le dimensioni della mappa
 </summary>
	<returns>Le dimensioni</returns>
</member><member name="M:GridBasedLibrary.HSMap.GetMapLocation">
	<summary>
 Restituisce la locazione della mappa
 </summary>
	<returns>Locazione della mappa</returns>
</member><member name="M:GridBasedLibrary.HSMap.SetTile(System.Int32,System.Int32,GridBasedLibrary.ITile)">
	<summary>
 Imposta il tile alla cordinata specificata
 </summary>
	<param name="x">Cordinata x</param>
	<param name="y">Cordinata y</param>
	<param name="newTile">Nuovo tile</param>
</member><member name="M:GridBasedLibrary.HSMap.SetTile(GridBasedLibrary.ILocated,GridBasedLibrary.ITile)">
	<summary>
 Imposta il tile alla cordinata specificata
 </summary>
	<param name="dest">Cordinata x</param>
	<param name="newTile">Nuovo tile</param>
	<exception cref="T:System.ArgumentNullException">Si verifica quando dest è nothing</exception>
</member><member name="M:GridBasedLibrary.HSMap.SetDefaultTile(GridBasedLibrary.ITile)">
	<summary>
 Imposta il tile di default
 </summary>
	<param name="newTile">Nuovo tile</param>
	<exception cref="T:System.ArgumentNullException">Si verifica quando newtile è nothing</exception>
</member><member name="M:GridBasedLibrary.HSMap.InitMap">
	<summary>
 Inizializza i tile
 </summary>
</member><member name="M:GridBasedLibrary.HSMap.IsValid(GridBasedLibrary.ILocated)">
	<summary>
 Verifica che la cordinata è valida nella mappa
 </summary>
	<param name="c">Cordinata da verificare</param>
	<returns>True se è valida, altrimenti false</returns>
</member><member name="M:GridBasedLibrary.HSMap.IsValid(System.Int32,System.Int32)">
	<summary>
 Verifica che la cordinata è valida nella mappa
 </summary>
	<param name="cX">Cordinata X</param>
	<param name="cY">Cordinat Y</param>
	<returns>True se è valida, altrimenti false</returns>
</member><member name="M:GridBasedLibrary.HSMap.NotifyChange(GridBasedLibrary.IActor,GridBasedLibrary.IMapTile,GridBasedLibrary.IMapTile)">
	<summary>
 Viene notificato a IMap che l'attore ha cambiato posizione
 </summary>
	<param name="act">Attore che si è spostato</param>
	<param name="src">Sorgente</param>
	<param name="dest">Destinazione</param>
</member><member name="M:GridBasedLibrary.HSMap.SetActor(GridBasedLibrary.IActor)">
	<summary>
 Imposta l'attore sulla mappa (in modo insicuro)
 </summary>
	<param name="act">Attore da impostare</param>
</member><member name="M:GridBasedLibrary.HSMap.GetActor(GridBasedLibrary.ILocated)">
	<summary>
 Restituisce l'attore presente nella cordinata
 </summary>
	<param name="c">Cordinata</param>
	<returns>Attore che è presente</returns>
	<remarks>Se non è presente alcun attore restituisce Nothing</remarks>
</member><member name="M:GridBasedLibrary.HSMap.GetActor(System.Int32,System.Int32)">
	<summary>
 Restituisce l'attore presente nella cordinata
 </summary>
	<param name="x">Cordinata X</param>
	<param name="y">Cordinata Y</param>
	<returns>Attore che è presente</returns>
	<remarks>Se non è presente alcun attore restituisce Nothing</remarks>
</member><member name="M:GridBasedLibrary.HSMap.DespawnActor(GridBasedLibrary.IActor)">
	<summary>
 Despawna l'attore
 </summary>
	<param name="act">Attore da despawnare</param>
</member><member name="T:GridBasedLibrary.HSMap">
	<summary>
 Rappresenta una mappa
 </summary>
	<remarks>Utilizza un algoritmo basato sulla velocità</remarks>
</member><member name="F:GridBasedLibrary.coefficientDirection.NONE">
	<summary>
 Coefficiente nullo
 </summary>
	<remarks>Significa che la x o la y non cambia</remarks>
</member><member name="F:GridBasedLibrary.coefficientDirection.MOVE">
	<summary>
 Coefficiente spostamento
 </summary>
	<remarks>Significa che la x o la y si sposta di offset</remarks>
</member><member name="F:GridBasedLibrary.coefficientDirection.MOVE_OPPOSTE">
	<summary>
 Coefficiente spostamento
 </summary>
	<remarks>Significa che la X si sposta di -offset</remarks>
</member><member name="T:GridBasedLibrary.coefficientDirection">
	<summary>
 Elenco di coefficienti per l'offset nel calcolo delle direzioni
 </summary>
</member><member name="E:GridBasedLibrary.Errorable.Error">
	<summary>
 Evento che si verifica quando viene lanciato un errore
 </summary>
	<param name="sender">Oggetto che ha lanciato errore</param>
	<param name="ex">Eccezione rilevata</param>
</member><member name="M:GridBasedLibrary.Errorable.OnError(System.Exception)">
	<summary>
 Lancia volutamente l'eccezione
 </summary>
	<param name="ex">Eccezione da lanciare</param>
</member><member name="M:GridBasedLibrary.Errorable.Errorable_Error(System.Object,System.Exception)">
	<summary>
 EventHandler di default che scrive su 2 l'eccezione
 </summary>
	<param name="sender">Oggetto che lanciato l'eccezione</param>
	<param name="ex">Eccezione lanciata</param>
</member><member name="T:GridBasedLibrary.Errorable">
	<summary>
 Rappresenta la classe base dei oggetti in grado di causare errori
 </summary>
</member><member name="F:GridBasedLibrary.ActorDirections.UP">
	<summary>
 Flag che indica di espandersi verso su
 </summary>
</member><member name="F:GridBasedLibrary.ActorDirections.RIGHT_UP">
	<summary>
 Flag che indica di espandersi verso dx-sopra
 </summary>
</member><member name="F:GridBasedLibrary.ActorDirections.RIGHT">
	<summary>
 Flag che indica di espandersi verso dx
 </summary>
</member><member name="F:GridBasedLibrary.ActorDirections.RIGHT_DOWN">
	<summary>
 Flag che indica di espandersi verso dx-giù
 </summary>
</member><member name="F:GridBasedLibrary.ActorDirections.DOWN">
	<summary>
 Flag che indica di espandersi verso giù
 </summary>
</member><member name="F:GridBasedLibrary.ActorDirections.LEFT_DOWN">
	<summary>
 Flag che indica di espandersi verso sx-giù
 </summary>
</member><member name="F:GridBasedLibrary.ActorDirections.LEFT">
	<summary>
 Flag che indica di espandersi verso sx
 </summary>
</member><member name="F:GridBasedLibrary.ActorDirections.LEFT_UP">
	<summary>
 Flag che indica di espandersi verso sx-su
 </summary>
</member><member name="F:GridBasedLibrary.ActorDirections.SQUARE">
	<summary>
 Flag che indica di espandersi verso le quattro direzioni
 </summary>
</member><member name="F:GridBasedLibrary.ActorDirections.DIAGONAL">
	<summary>
 Flag che indica di espandersi verso le direzioni diagonali
 </summary>
</member><member name="T:GridBasedLibrary.ActorDirections">
	<summary>
 Elenco di direzioni che un attore è in grado di fare
 </summary>
</member><member name="M:GridBasedLibrary.IMapTile.GetMap">
	<summary>
 Restituisce la mappa di appartenenza
 </summary>
	<returns>Mappa</returns>
</member><member name="M:GridBasedLibrary.IMapTile.GetTile">
	<summary>
 Restituisce il tile sulla piastrella
 </summary>
	<returns>Il tile</returns>
	<remarks>Se il tile è nothing viene restituito Default Tile di Map</remarks>
</member><member name="M:GridBasedLibrary.IMapTile.SetTile(GridBasedLibrary.ITile)">
	<summary>
 Imposta la piastrella sull' imapTile
 </summary>
	<param name="tile">Tile da impostare</param>
	<remarks>Gli aggiornamenti e il lancio degli eventi vengono eseguiti automaticamente</remarks>
</member><member name="M:GridBasedLibrary.IMapTile.SetUnsecureTile(GridBasedLibrary.ITile)">
	<summary>
 Imposta la piastrella sull' imaptile in modo insicuro
 </summary>
	<param name="tile">Tile da impostare</param>
	<remarks>Gli eventi non vengono eseguiti</remarks>
</member><member name="M:GridBasedLibrary.IMapTile.RemoveTile">
	<summary>
 Rimuove il tile
 </summary>
	<remarks>Viene aggiornato la renderFlag e attivati gli eventi</remarks>
</member><member name="M:GridBasedLibrary.IMapTile.RemoveUnsecureTile">
	<summary>
 Rimuove il tile in modo insicuro
 </summary>
	<remarks>Non vengono aggiornati la renderFlag o attivati gli eventi</remarks>
</member><member name="M:GridBasedLibrary.IMapTile.HasTile">
	<summary>
 Restituisce True se c'è un tile
 </summary>
	<returns>True il tile non è nothing</returns>
</member><member name="M:GridBasedLibrary.IMapTile.Init">
	<summary>
 Inizializza il mapTile e il tile
 </summary>
</member><member name="M:GridBasedLibrary.IMapTile.UpdateTile">
	<summary>
 Aggiorna il tile
 </summary>
</member><member name="M:GridBasedLibrary.IMapTile.HasActor">
	<summary>
 Restituisce true se è presente un attore, altrimenti false
 </summary>
	<returns>True se è presente un attore, altrimenti false</returns>
</member><member name="M:GridBasedLibrary.IMapTile.GetActor">
	<summary>
 Restituisce l'attore se ne è presente, altrimenti nothing
 </summary>
	<returns>Attore</returns>
</member><member name="M:GridBasedLibrary.IMapTile.SetActor(GridBasedLibrary.IActor)">
	<summary>
 Imposta l'attore in modo insicuro
 </summary>
	<param name="act">Attore da impostare</param>
</member><member name="M:GridBasedLibrary.IMapTile.CanActorEnter(GridBasedLibrary.IActor)">
	<summary>
 Verifica se l'attore può spostarsi qui
 </summary>
	<param name="act">Attore da verificare</param>
	<returns>True se può entrare, altrimenti false</returns>
</member><member name="T:GridBasedLibrary.IMapTile">
	<summary>
 Interfaccia che rappresenta una piastrella in una mappa
 </summary>
</member><member name="M:GridBasedLibrary.IMapTileClient.SetRenderFlag">
	<summary>
 Imposta la flag per l'aggiornamento
 </summary>
</member><member name="M:GridBasedLibrary.IMapTileClient.RemoveRenderFlag">
	<summary>
 Rimuove la flag per l'aggiornamento
 </summary>
</member><member name="M:GridBasedLibrary.IMapTileClient.CanRenderFlag">
	<summary>
 Verifica se deve essere ri-renderderizzato
 </summary>
	<returns>True se deve essere ri-renderizzato</returns>
</member><member name="M:GridBasedLibrary.IMapTileClient.GetMapClient">
	<summary>
 Restituisce la mappa usata dal client
 </summary>
	<returns>La mappa</returns>
</member><member name="T:GridBasedLibrary.IMapTileClient">
	<summary>
 Interfaccia che rappresenta un IMapTile nel client
 </summary>
</member><member name="M:GridBasedLibrary.IRange.GetMin">
	<summary>
 Ottiene il valore minimo
 </summary>
	<returns>Il valore minimo</returns>
</member><member name="M:GridBasedLibrary.IRange.GetMax">
	<summary>
 Ottiene il valore massimo
 </summary>
	<returns>Il valore massimo</returns>
</member><member name="M:GridBasedLibrary.IRange.GetSize">
	<summary>
 Ottiene la dimensione del range
 </summary>
	<returns>Dimensioni del range</returns>
	<remarks>Max-Min+1</remarks>
</member><member name="M:GridBasedLibrary.IRange.GetRange">
	<summary>
 Ottiene il range
 </summary>
	<returns>Il range</returns>
	<remarks>I tipo di valore restituito può variare a seconda dell' implementazione</remarks>
</member><member name="M:GridBasedLibrary.IRange.CheckValue(System.Int32)">
	<summary>
 Verifica che il valore è compreso nel range
 </summary>
	<param name="value">Valore da verificare</param>
	<returns>True se è compreso, altrimenti false</returns>
</member><member name="T:GridBasedLibrary.IRange">
	<summary>
 Rappresenta un interfaccia per un range
 </summary>
</member><member name="M:GridBasedLibrary.ITile.GetCopy">
	<summary>
 Restituisce una copia di se stesso
 </summary>
	<returns>Una copia di se stesso</returns>
</member><member name="M:GridBasedLibrary.ITile.GetIstance">
	<summary>
 Restituisce una copia di se stesso se non è statico oppure se stesso
 </summary>
	<returns>Se statico restituisce se stesso, invece se non statico una copia</returns>
	<remarks></remarks>
</member><member name="M:GridBasedLibrary.ITile.IsStatic">
	<summary>
 Restituisce true se è condiviso
 </summary>
	<returns>True se è condiviso</returns>
</member><member name="M:GridBasedLibrary.ITile.GetScoreForPathFinder(GridBasedLibrary.IActor)">
	<summary>
 Restituisce il punteggio usato dai pathFinder
 </summary>
	<param name="act">Il punteggio può variare per l'attore</param>
	<returns>Il punteggio</returns>
	<remarks>Il punteggio potrebbe dipendere dall' attore</remarks>
</member><member name="M:GridBasedLibrary.ITile.GetName">
	<summary>
 Ottiene il nome assegnato al tile
 </summary>
	<returns>Il nome</returns>
</member><member name="M:GridBasedLibrary.ITile.Init(GridBasedLibrary.IMapTile)">
	<summary>
 Inizializza il tile con il maptile di riferimento
 </summary>
	<param name="ref">MapTile di riferimento</param>
</member><member name="M:GridBasedLibrary.ITile.Update(GridBasedLibrary.IMapTile)">
	<summary>
 Aggiorna il tile
 </summary>
	<param name="ref">MapTile di riferimento</param>
</member><member name="M:GridBasedLibrary.ITile.IsEqual(GridBasedLibrary.ITile)">
	<summary>
 Verifica che i 2 tile sono uguali o no
 </summary>
	<param name="tile2">Secondo tile</param>
	<returns>True se sono uguali, altrimenti false</returns>
</member><member name="M:GridBasedLibrary.ITile.IsRenderEqual(GridBasedLibrary.ITile)">
	<summary>
 Restituisce true se sono uguali dal punto di vista grafico
 </summary>
	<param name="tile2">Secondo tile</param>
	<returns>True se sono uguali dal punto di vista grafico</returns>
</member><member name="E:GridBasedLibrary.ITile.ActorEntering">
	<summary>
 Evento che si verifica quando un attore sta per entrare in questo tile
 </summary>
	<param name="act">Attore che sta per entrare</param>
	<param name="cancel">True se cancellare l'evento</param>
	<param name="from">MapTile di partenza</param>
	<param name="dest">MapTile di destinazione</param>
</member><member name="E:GridBasedLibrary.ITile.ActorEntered">
	<summary>
 Evento che si verifica quando un attore è entrato
 </summary>
	<param name="act">Attore che è entrato</param>
	<param name="from">MapTile di partenza</param>
	<param name="dest">MapTile di destinazione</param>
</member><member name="M:GridBasedLibrary.ITile.OnActorEntering(GridBasedLibrary.IActor,GridBasedLibrary.IMapTile,GridBasedLibrary.IMapTile)">
	<summary>
 Lancia l'evento che si verifica quando un attore sta per entrare in questo tile
 </summary>
	<param name="act">Attore che si spostato</param>
	<param name="dest">MapTile di destinazione</param>
	<returns>True se è stato rifiutato</returns>
</member><member name="M:GridBasedLibrary.ITile.OnActorEntered(GridBasedLibrary.IActor,GridBasedLibrary.IMapTile,GridBasedLibrary.IMapTile)">
	<summary>
 Lancia l'evento che si verifica quando un attore è entrato in questo tile
 </summary>
	<param name="act">Attore che ha compiuto l'azione</param>
	<param name="from">TileMap di origine</param>
	<param name="dest">MapTile di destinazione</param>
</member><member name="E:GridBasedLibrary.ITile.ActorLeaving">
	<summary>
 Evento che si verifica quando un attore sta per lasciare questo tile
 </summary>
	<param name="act">Attore che sta per entrare</param>
	<param name="cancel">True se cancellare l'evento</param>
	<param name="from">MapTile di partenza</param>
	<param name="dest">MapTile di destinazione</param>
</member><member name="E:GridBasedLibrary.ITile.ActorLeaved">
	<summary>
 Evento che si verifica quando un attore ha lasciato questo tile
 </summary>
	<param name="act">Attore che è entrato</param>
	<param name="from">MapTile di partenza</param>
	<param name="dest">MapTile di destinazione</param>
</member><member name="M:GridBasedLibrary.ITile.OnActorLeaving(GridBasedLibrary.IActor,GridBasedLibrary.IMapTile,GridBasedLibrary.IMapTile)">
	<summary>
 Lancia l'evento che si verifica quando un attore sta per lasciare questo tile
 </summary>
	<param name="act">Attore che si spostato</param>
	<param name="dest">MapTile di destinazione</param>
	<returns>True se è stato rifiutato</returns>
</member><member name="M:GridBasedLibrary.ITile.OnActorLeaved(GridBasedLibrary.IActor,GridBasedLibrary.IMapTile,GridBasedLibrary.IMapTile)">
	<summary>
 Lancia l'evento che si verifica quando un attore ha lasciato questo tile
 </summary>
	<param name="act">Attore che ha compiuto l'azione</param>
	<param name="from">TileMap di origine</param>
	<param name="dest">MapTile di destinazione</param>
</member><member name="M:GridBasedLibrary.ITile.CanActorEnter(GridBasedLibrary.IActor)">
	<summary>
 Restituisce true se l'attore può entrare nel tile
 </summary>
	<param name="act">Attore da verificare</param>
	<returns>True se può entrare</returns>
</member><member name="T:GridBasedLibrary.ITile">
	<summary>
 Interfaccia che rappresenta un tile
 </summary>
</member><member name="F:GridBasedLibrary.PathFinder.act">
	<summary>
 Ottiene o imposta l'attore di riferimento
 </summary>
</member><member name="F:GridBasedLibrary.PathFinder.src">
	<summary>
 Ottiene o imposta il punto iniziale
 </summary>
</member><member name="F:GridBasedLibrary.PathFinder.dest">
	<summary>
 Ottiene o imposta il punto finale
 </summary>
</member><member name="F:GridBasedLibrary.PathFinder.map">
	<summary>
 Ottiene o imposta la mappa
 </summary>
</member><member name="F:GridBasedLibrary.PathFinder.actorDirectionsMode">
	<summary>
 Ottiene o imposta le direzioni in cui l'attore è in grado di fare
 </summary>
</member><member name="M:GridBasedLibrary.PathFinder.#ctor(GridBasedLibrary.ActorDirections)">
	<summary>
 Crea una nuova istanza di actor Directions
 </summary>
	<param name="actDirections">Direzione dell' attore</param>
</member><member name="M:GridBasedLibrary.PathFinder.Find(GridBasedLibrary.IActor,GridBasedLibrary.ILocated,GridBasedLibrary.ILocated,GridBasedLibrary.IMap)">
	<summary>
 Cerca il percorso da src a dest per l'attore act
 </summary>
	<param name="act">Attore</param>
	<param name="src">Punto iniziale</param>
	<param name="dest">Punto finale</param>
	<param name="map">Mappa di riferimento</param>
	<returns>Percorso</returns>
	<remarks>Questo metodo è utile maggiormente per attori ideali</remarks>
</member><member name="M:GridBasedLibrary.PathFinder.Find(GridBasedLibrary.IActor,GridBasedLibrary.ILocated)">
	<summary>
 Cerca il percorso da src a dest per l'attore act
 </summary>
	<param name="act">Attore</param>
	<param name="dest">Punto finale</param>
	<returns>Percorso</returns>
	<remarks>Il punto iniziale è la posizione dell' attore</remarks>
</member><member name="M:GridBasedLibrary.PathFinder.Find(GridBasedLibrary.IActor,System.Int32,System.Int32,System.Int32,System.Int32,GridBasedLibrary.IMap)">
	<summary>
 Cerca il percorso da src a dest per l'attore act
 </summary>
	<param name="act">Attore</param>
	<param name="destX">Cordinata X del punto finale</param>
	<param name="destY">Cordinata Y del punto finale</param>
	<param name="srcX">Cordinata X del punto iniziale</param>
	<param name="srcY">Cordinata Y del punto iniziale</param>
	<param name="map">Mappa di riferimento</param>
	<returns>Percorso</returns>
	<remarks>Src non è necessario per attori reali, ma viene considerato src come punto iniziale</remarks>
</member><member name="M:GridBasedLibrary.PathFinder.Find(GridBasedLibrary.IActor,System.Int32,System.Int32)">
	<summary>
 Cerca il percorso da src a dest per l'attore act
 </summary>
	<param name="act">Attore</param>
	<param name="destX">Cordinata X del punto finale</param>
	<param name="destY">Cordinata Y del punto finale</param>
	<returns>Percorso</returns>
	<remarks>Il punto iniziale è la posizione dell' attore</remarks>
</member><member name="M:GridBasedLibrary.PathFinder.Find">
	<summary>
 Cerca il percorso
 </summary>
	<returns>Percorso da trovare</returns>
</member><member name="T:GridBasedLibrary.PathFinder">
	<summary>
 Rappresenta un pathFinder
 </summary>
</member><member name="F:GridBasedLibrary.HSMapTile.map">
	<summary>
 Ottiene o imposta la mappa
 </summary>
</member><member name="F:GridBasedLibrary.HSMapTile.tile">
	<summary>
 Ottiene o imposta il tile
 </summary>
</member><member name="F:GridBasedLibrary.HSMapTile.act">
	<summary>
 Ottiene o imposta l'attore
 </summary>
</member><member name="M:GridBasedLibrary.HSMapTile.#ctor(GridBasedLibrary.IMap,GridBasedLibrary.Coord)">
	<summary>
 Crea una nuova istanza di MapTile
 </summary>
	<param name="map">Mappa da usare</param>
	<param name="loc">Locazione del MapTilr</param>
</member><member name="M:GridBasedLibrary.HSMapTile.#ctor(GridBasedLibrary.IMap,GridBasedLibrary.ILocated)">
	<summary>
 Crea una nuova istanza di MapTile
 </summary>
	<param name="map">Mappa da usare</param>
	<param name="loc">Locazione del MapTilr</param>
</member><member name="M:GridBasedLibrary.HSMapTile.#ctor(GridBasedLibrary.IMap,System.Int32,System.Int32)">
	<summary>
 Crea una nuova istanza di MapTile
 </summary>
	<param name="map">Mappa da usare</param>
	<param name="locX">Locazione X del MapTilr</param>
	<param name="locY">Locazione Y del MapTile</param>
</member><member name="M:GridBasedLibrary.HSMapTile.GetMap">
	<summary>
 Restituisce la mappa di appartenenza
 </summary>
	<returns>Mappa</returns>
</member><member name="M:GridBasedLibrary.HSMapTile.GetTile">
	<summary>
 Restituisce il tile sulla piastrella
 </summary>
	<returns>Il tile</returns>
	<remarks>Se il tile è nothing viene restituito Default Tile di Map</remarks>
</member><member name="M:GridBasedLibrary.HSMapTile.SetTile(GridBasedLibrary.ITile)">
	<summary>
 Imposta la piastrella sull' imapTile
 </summary>
	<param name="tile">Tile da impostare</param>
	<remarks>Gli aggiornamenti e il lancio degli eventi vengono eseguiti automaticamente</remarks>
</member><member name="M:GridBasedLibrary.HSMapTile.SetUnsecureTile(GridBasedLibrary.ITile)">
	<summary>
 Imposta la piastrella sull' imaptile in modo insicuro
 </summary>
	<param name="tile">Tile da impostare</param>
	<remarks>Gli eventi non vengono eseguiti</remarks>
</member><member name="M:GridBasedLibrary.HSMapTile.RemoveTile">
	<summary>
 Rimuove il tile
 </summary>
	<remarks>Viene aggiornato la renderFlag e attivati gli eventi</remarks>
</member><member name="M:GridBasedLibrary.HSMapTile.RemoveUnsecureTile">
	<summary>
 Rimuove il tile in modo insicuro
 </summary>
	<remarks>Non vengono aggiornati la renderFlag o attivati gli eventi</remarks>
</member><member name="M:GridBasedLibrary.HSMapTile.HasTile">
	<summary>
 Restituisce True se c'è un tile
 </summary>
	<returns>True il tile non è nothing</returns>
</member><member name="M:GridBasedLibrary.HSMapTile.Init">
	<summary>
 Inizializza il mapTile e il tile
 </summary>
</member><member name="M:GridBasedLibrary.HSMapTile.UpdateTile">
	<summary>
 Aggiorna il tile
 </summary>
</member><member name="M:GridBasedLibrary.HSMapTile.HasActor">
	<summary>
 Restituisce true se è presente un attore, altrimenti false
 </summary>
	<returns>True se è presente un attore, altrimenti false</returns>
</member><member name="M:GridBasedLibrary.HSMapTile.GetActor">
	<summary>
 Restituisce l'attore se ne è presente, altrimenti nothing
 </summary>
	<returns>Attore</returns>
</member><member name="M:GridBasedLibrary.HSMapTile.SetActor(GridBasedLibrary.IActor)">
	<summary>
 Imposta l'attore in modo insicuro
 </summary>
	<param name="act">Attore da impostare</param>
</member><member name="M:GridBasedLibrary.HSMapTile.CanActorEnter(GridBasedLibrary.IActor)">
	<summary>
 Verifica se l'attore può spostarsi qui
 </summary>
	<param name="act">Attore da verificare</param>
	<returns>True se può entrare, altrimenti false</returns>
</member><member name="T:GridBasedLibrary.HSMapTile">
	<summary>
 Rappresenta un MapTile
 </summary>
	<remarks>Utilizza dei algoritmi basati sulla velocità</remarks>
</member><member name="F:GridBasedLibrary.PathFinderNode.scoreG">
	<summary>
 Ottiene o imposta il punteggio G valutato
 </summary>
	<remarks>Contiene la distanza ottimale tra il punto iniziale e finale</remarks>
</member><member name="F:GridBasedLibrary.PathFinderNode.scoreH">
	<summary>
 Ottiene o imposta il punteggio F valutato
 </summary>
	<remarks>Distanza Heuristica valutata</remarks>
</member><member name="F:GridBasedLibrary.PathFinderNode.cameFrom">
	<summary>
 Ottien o imposta il punto di provenienza
 </summary>
</member><member name="M:GridBasedLibrary.PathFinderNode.SetScoreG(System.Single)">
	<summary>
 Imposta il punteggio G associato
 </summary>
	<param name="val">Valore da impostare</param>
</member><member name="M:GridBasedLibrary.PathFinderNode.SetScoreH(System.Single)">
	<summary>
 Imposta il punteggio G associato
 </summary>
	<param name="val">Valore da impostare</param>
</member><member name="M:GridBasedLibrary.PathFinderNode.SetCameFrom(GridBasedLibrary.ILocated)">
	<summary>
 Imposta il punto di provenienza
 </summary>
	<param name="c">Punto di provenienza</param>
</member><member name="M:GridBasedLibrary.PathFinderNode.SetCameFrom(System.Int32,System.Int32)">
	<summary>
 Imposta il punto di provenienza
 </summary>
	<param name="x">Cordinata X del punto di provenienza</param>
	<param name="y">Cordinata Y del punto di provenienza</param>
</member><member name="M:GridBasedLibrary.PathFinderNode.GetScoreG">
	<summary>
 Restituisce il punteggio G
 </summary>
	<returns>Punteggio G</returns>
</member><member name="M:GridBasedLibrary.PathFinderNode.GetScoreH">
	<summary>
 Restituisce il punteggio H
 </summary>
	<returns>Punteggio H</returns>
</member><member name="M:GridBasedLibrary.PathFinderNode.GetScoreF">
	<summary>
 Restituisce il punteggio F
 </summary>
	<returns>Punteggio F</returns>
</member><member name="M:GridBasedLibrary.PathFinderNode.GetCameFrom">
	<summary>
 Restituisce il punto di provenienza
 </summary>
	<returns>Cordinata di provenienza</returns>
</member><member name="T:GridBasedLibrary.PathFinderNode">
	<summary>
 Rappresenta un nodo usato nel pathFinding
 </summary>
</member><member name="M:GridBasedLibrary.CoordSelecter.Select(System.Int32,System.Int32)">
	<summary>
 Seleziona una cordinata
 </summary>
	<param name="x">Cordinata x</param>
	<param name="y">Cordinata y</param>
</member><member name="M:GridBasedLibrary.CoordSelecter.Select(GridBasedLibrary.ILocated)">
	<summary>
 Seleziona una cordinata
 </summary>
	<param name="c">Cordinata da selezionare</param>
</member><member name="M:GridBasedLibrary.CoordSelecter.Select(GridBasedLibrary.ILocated[])">
	<summary>
 Seleziona una cordinata
 </summary>
	<param name="Coords">Cordinate da selezionare</param>
</member><member name="M:GridBasedLibrary.CoordSelecter.DeSelect(System.Int32,System.Int32)">
	<summary>
 Deseleziona una cordinata
 </summary>
	<param name="x">Cordinata x</param>
	<param name="y">Cordinata y</param>
</member><member name="M:GridBasedLibrary.CoordSelecter.DeSelect(GridBasedLibrary.ILocated)">
	<summary>
 Deseleziona una cordinata
 </summary>
	<param name="c">Cordinata da deselezionare</param>
</member><member name="M:GridBasedLibrary.CoordSelecter.DeSelect(GridBasedLibrary.ILocated[])">
	<summary>
 Deseleziona una cordinata
 </summary>
	<param name="Coords">Cordinate da deselezionare</param>
</member><member name="M:GridBasedLibrary.CoordSelecter.DeSelectAll">
	<summary>
 Deseleziona tutte le cordinate
 </summary>
</member><member name="M:GridBasedLibrary.CoordSelecter.IsSelected(System.Int32,System.Int32)">
	<summary>
 Verifica se è selezionata una cordinata
 </summary>
	<param name="x">Cordinata x</param>
	<param name="y">Cordinata y</param>
</member><member name="M:GridBasedLibrary.CoordSelecter.IsSelected(GridBasedLibrary.ILocated)">
	<summary>
 Verifica se è selezionata una cordinata
 </summary>
	<param name="c">Cordinata da verificare</param>
</member><member name="M:GridBasedLibrary.CoordSelecter.IsSelected(GridBasedLibrary.ILocated[])">
	<summary>
 Verifica se sono selezionate delle cordinate
 </summary>
	<param name="Coords">Cordinate da verificare</param>
</member><member name="M:GridBasedLibrary.CoordSelecter.GetSelection">
	<summary>
 Ottiene le cordinate selezionate
 </summary>
	<returns>Cordinate selezionate</returns>
</member><member name="M:GridBasedLibrary.CoordSelecter.CopySelectionTo(GridBasedLibrary.ICoordSelecter,System.Boolean)">
	<summary>
 Copia la selezione su dest
 </summary>
	<param name="dest">ICoordSelecter di destinazione di copia</param>
	<param name="DeSelectAllDest">True se deselezionare tutte le cordinate, altrimenti false</param>
</member><member name="M:GridBasedLibrary.CoordSelecter.OrSelectionTo(GridBasedLibrary.ICoordSelecter,GridBasedLibrary.ICoordSelecter,System.Boolean)">
	<summary>
 Esegue l'operazione OR tra questa istanza e second e seleziona il risultato su dest
 </summary>
	<param name="second">Secondo ICoordSelecter</param>
	<param name="dest">Selecter di destinazione(risultato)</param>
	<param name="DeSelectAllDest">True se deselezionare dest</param>
	<remarks>NB se (second is dest) e (DeSelectAllDest=True) dest è selezionato dai stessi punti di questa istanza</remarks>
</member><member name="M:GridBasedLibrary.CoordSelecter.XorSelectionTo(GridBasedLibrary.ICoordSelecter,GridBasedLibrary.ICoordSelecter,System.Boolean)">
	<summary>
 Esegue l'operazione XOR tra questa istanza e second e seleziona il risultato su dest
 </summary>
	<param name="second">Secondo ICoordSelecter</param>
	<param name="dest">Selecter di destinazione(risultato)</param>
	<param name="DeSelectAllDest">True se deselezionare dest</param>
	<remarks>NB se (second is dest) e (DeSelectAllDest=True) dest è selezionato dai stessi punti di questa istanza</remarks>
</member><member name="M:GridBasedLibrary.CoordSelecter.AndSelectionTo(GridBasedLibrary.ICoordSelecter,GridBasedLibrary.ICoordSelecter,System.Boolean)">
	<summary>
 Esegue l'operazione And tra questa istanza e second e seleziona il risultato su dest
 </summary>
	<param name="second">Secondo ICoordSelecter</param>
	<param name="dest">Selecter di destinazione(risultato)</param>
	<param name="DeSelectAllDest">True se deselezionare dest</param>
	<remarks>NB se (second is dest) e (DeSelectAllDest=True) dest non ha alcuna cordinata selezionata</remarks>
</member><member name="M:GridBasedLibrary.CoordSelecter.SubSelectionTo(GridBasedLibrary.ICoordSelecter,GridBasedLibrary.ICoordSelecter,System.Boolean)">
	<summary>
 Esegue l'operazione differenza insiemistica tra questa istanza e second e seleziona il risultato su dest
 </summary>
	<param name="second">Secondo ICoordSelecter</param>
	<param name="dest">Selecter di destinazione(risultato)</param>
	<param name="DeSelectAllDest">True se deselezionare dest</param>
	<remarks>NB se (second is dest) e (DeSelectAllDest=True) dest ha gli stesse cordinate selezionate di questa istanza</remarks>
</member><member name="M:GridBasedLibrary.CoordSelecter.GetEnumerator">
	<summary>
 Restituisce l'enumeratore usato da questa classe
 </summary>
	<returns>Enumeratore usato</returns>
</member><member name="M:GridBasedLibrary.CoordSelecter.GetEnumerator1">
	<summary>
 Restituisce l'enumeratore usato da questa classe
 </summary>
	<returns>Enumeratore usato</returns>
</member><member name="T:GridBasedLibrary.CoordSelecter">
	<summary>
 Classe base per il selecter di cordinate
 </summary>
</member><member name="M:GridBasedLibrary.IMapGenerator.Generate(GridBasedLibrary.IMap)">
	<summary>
 Genera la mappa su tutta mapRef
 </summary>
	<param name="mapRef">Mappa di riferimento</param>
</member><member name="M:GridBasedLibrary.IMapGenerator.Generate(GridBasedLibrary.IMap,GridBasedLibrary.Rectangle)">
	<summary>
 Genera la mappa su mapRef su tutta la regione
 </summary>
	<param name="mapRef">Mappa di riferimento</param>
	<param name="region">Regione su cui generare la mappa</param>
</member><member name="M:GridBasedLibrary.IMapGenerator.Generate(GridBasedLibrary.IMap,GridBasedLibrary.ILocated,GridBasedLibrary.Size)">
	<summary>
 Genera la mappa su mapRef su tutta la regione
 </summary>
	<param name="mapRef">Mappa di riferimento</param>
	<param name="regionC">Cordinata della regione</param>
	<param name="regionS">Dimensioni dellla regione</param>
</member><member name="M:GridBasedLibrary.IMapGenerator.Generate(GridBasedLibrary.IMap,System.Int32,System.Int32,System.UInt32,System.UInt32)">
	<summary>
 Genera la mappa su mapRef su tutta la regione
 </summary>
	<param name="mapRef">Mappa di riferimento</param>
 z<param name="regionX">Cordinata x della regione</param>
	<param name="regionY">Cordinata y della regione</param>
	<param name="regionWidth">Larghezza della regione</param>
	<param name="regionHeight">Altezza della regione</param>
</member><member name="T:GridBasedLibrary.IMapGenerator">
	<summary>
 Rappresenta un generatore di mappe
 </summary>
</member><member name="M:GridBasedLibrary.IMovable.SetX(System.Int32)">
	<summary>
 Imposta la cordinata X
 </summary>
	<param name="value">Valore da impostare</param>
</member><member name="M:GridBasedLibrary.IMovable.SetY(System.Int32)">
	<summary>
 Imposta la cordinata Y
 </summary>
	<param name="value">Valore da impostare</param>
</member><member name="M:GridBasedLibrary.IMovable.Set(System.Int32,System.Int32)">
	<summary>
 Imposta le cordinate XY
 </summary>
</member><member name="M:GridBasedLibrary.IMovable.Set(GridBasedLibrary.ILocated)">
	<summary>
 Imposta le cordinate XY
 </summary>
</member><member name="M:GridBasedLibrary.IMovable.MoveUp">
	<summary>
 Sposta la cordinata in alto
 </summary>
</member><member name="M:GridBasedLibrary.IMovable.MoveRightUp">
	<summary>
 Sposta la cordinata in alto a destra
 </summary>
</member><member name="M:GridBasedLibrary.IMovable.MoveRight">
	<summary>
 Sposta la cordinata a destra
 </summary>
</member><member name="M:GridBasedLibrary.IMovable.MoveRightDown">
	<summary>
 Sposta la cordinata in basso a destra
 </summary>
</member><member name="M:GridBasedLibrary.IMovable.MoveDown">
	<summary>
 Sposta la cordinata in basso
 </summary>
</member><member name="M:GridBasedLibrary.IMovable.MoveLeftDown">
	<summary>
 Sposta la cordinata in basso a sinistra
 </summary>
</member><member name="M:GridBasedLibrary.IMovable.MoveLeft">
	<summary>
 Sposta la cordinata a sinistra
 </summary>
</member><member name="M:GridBasedLibrary.IMovable.MoveLeftUp">
	<summary>
 Sposta la cordinata in alto a sinistra
 </summary>
</member><member name="M:GridBasedLibrary.IMovable.MoveUp(System.Int32)">
	<summary>
 Sposta la cordinata in alto
 </summary>
	<param name="offset">Offset</param>
</member><member name="M:GridBasedLibrary.IMovable.MoveRightUp(System.Int32)">
	<summary>
 Sposta la cordinata in alto a destra
 </summary>
	<param name="offset">Offset</param>
</member><member name="M:GridBasedLibrary.IMovable.MoveRight(System.Int32)">
	<summary>
 Sposta la cordinata a destra
 </summary>
	<param name="offset">Offset</param>
</member><member name="M:GridBasedLibrary.IMovable.MoveRightDown(System.Int32)">
	<summary>
 Sposta la cordinata in basso a destra
 </summary>
	<param name="offset">Offset</param>
</member><member name="M:GridBasedLibrary.IMovable.MoveDown(System.Int32)">
	<summary>
 Sposta la cordinata in basso
 </summary>
	<param name="offset">Offset</param>
</member><member name="M:GridBasedLibrary.IMovable.MoveLeftDown(System.Int32)">
	<summary>
 Sposta la cordinata in basso a sinistra
 </summary>
	<param name="offset">Offset</param>
</member><member name="M:GridBasedLibrary.IMovable.MoveLeft(System.Int32)">
	<summary>
 Sposta la cordinata a sinistra
 </summary>
	<param name="offset">Offset</param>
</member><member name="M:GridBasedLibrary.IMovable.MoveLeftUp(System.Int32)">
	<summary>
 Sposta la cordinata in alto a sinistra
 </summary>
	<param name="offset">Offset</param>
</member><member name="M:GridBasedLibrary.IMovable.MoveByDirection(GridBasedLibrary.Direction)">
	<summary>
 Sposta la cordinata in base alla <paramref name="direction">direzione</paramref>
	</summary>
	<param name="direction">Direzione</param>
</member><member name="M:GridBasedLibrary.IMovable.MoveByDirection(GridBasedLibrary.Direction,System.Int32)">
	<summary>
 Sposta la cordinata in base alla <paramref name="direction">direzione</paramref>
	</summary>
	<param name="direction">Direzione</param>
	<param name="offset">Offset</param>
</member><member name="M:GridBasedLibrary.IMovable.MoveByOffset(System.Int32,System.Int32)">
	<summary>
 Sposta la cordinata in base all' offset
 </summary>
	<param name="offx">Offset X</param>
	<param name="offy">Offset Y</param>
</member><member name="M:GridBasedLibrary.IMovable.MoveTo(System.Int32,System.Int32)">
	<summary>
 Sposta la cordinata a destinazione
 </summary>
	<param name="destX">Destinazione X</param>
	<param name="destY">Destinazione Y</param>
</member><member name="M:GridBasedLibrary.IMovable.MoveTo(GridBasedLibrary.ILocated)">
	<summary>
 Sposta la cordinata a destinazione
 </summary>
	<param name="dest">Destinazione</param>
</member><member name="T:GridBasedLibrary.IMovable">
	<summary>
 Rappresenta un oggetto in grado di spostarsi
 </summary>
</member><member name="M:GridBasedLibrary.IRandomGenerator.NextInt">
	<summary>
 Genera un numero intero casuale compreso tra 0 e int.maxvalue
 </summary>
	<returns>Intero casuale compreso tra 0 e int.maxvalue</returns>
</member><member name="M:GridBasedLibrary.IRandomGenerator.NextInt(System.Int32)">
	<summary>
 Genera un numero intero casuale compreso tra 0 e Max
 </summary>
	<returns>Intero casuale compreso tra 0 e max</returns>
</member><member name="M:GridBasedLibrary.IRandomGenerator.NextInt(System.Int32,System.Int32)">
	<summary>
 Genera un numero intero casuale compreso tra Min e Max
 </summary>
	<returns>Intero casuale compreso tra Min e Max</returns>
</member><member name="M:GridBasedLibrary.IRandomGenerator.NextSingle">
	<summary>
 Genera un numero single casuale compreso tra 0 e 1
 </summary>
	<returns>Single casuale compreso tra 0 e 1</returns>
</member><member name="M:GridBasedLibrary.IRandomGenerator.NextDouble">
	<summary>
 Genera un numero double casuale compreso tra 0 e 1
 </summary>
	<returns>Double casuale compreso tra 0 e 1</returns>
</member><member name="M:GridBasedLibrary.IRandomGenerator.NextItem``1(System.Collections.Generic.IEnumerable{``0})">
	<summary>
 Estrae un elemento casuale dalla lista
 </summary>
	<typeparam name="T">Tipo di elemento</typeparam>
	<param name="coll">Collezione di origine</param>
	<returns>Un elemento casuale</returns>
</member><member name="T:GridBasedLibrary.IRandomGenerator">
	<summary>
 Rappresenta l'interfaccia di base di un generatore di numeri casuali
 </summary>
</member><member name="F:GridBasedLibrary.CascadingCoordComparer.comparators">
	<summary>
 Ottiene o imposta l'array di comparatori
 </summary>
</member><member name="M:GridBasedLibrary.CascadingCoordComparer.#ctor(System.Collections.Generic.IComparer{GridBasedLibrary.ILocated}[])">
	<summary>
 Crea una nuova istanza di CascadingCoordComparer
 </summary>
</member><member name="M:GridBasedLibrary.CascadingCoordComparer.GetComparators">
	<summary>
 Restituisce i comparatori
 </summary>
	<returns>I comparatori</returns>
</member><member name="M:GridBasedLibrary.CascadingCoordComparer.Compare(GridBasedLibrary.ILocated,GridBasedLibrary.ILocated)">
	<summary>
 Compara 2 cordinate 
 </summary>
	<param name="c1">Cordinata X</param>
	<param name="c2">Cordinata Y</param>
	<returns>Maggiore di 1 se x viene prima di y, 0 se sono allo stesso livello, altrimenti minore di 1 se y viene prima di x</returns>
</member><member name="M:GridBasedLibrary.CascadingCoordComparer.Compare(GridBasedLibrary.Coord,GridBasedLibrary.Coord,System.Int32)">
	<summary>
 Compara 2 cordinate 
 </summary>
	<param name="c1">Cordinata X</param>
	<param name="c2">Cordinata Y</param>
	<param name="id">Id del comparatore da usare</param>
	<returns>Maggiore di 1 se c1 viene prima di c2, 0 se sono allo stesso livello, altrimenti minore di 1 se c1 viene prima di c2</returns>
</member><member name="M:GridBasedLibrary.CascadingCoordComparer.Compare(GridBasedLibrary.ILocated,GridBasedLibrary.ILocated,System.Int32)">
	<summary>
 Compara 2 cordinate 
 </summary>
	<param name="c1">Cordinata X</param>
	<param name="c2">Cordinata Y</param>
	<param name="id">Id del comparatore da usare</param>
	<returns>Maggiore di 1 se x viene prima di y, 0 se sono allo stesso livello, altrimenti minore di 1 se y viene prima di x</returns>
</member><member name="T:GridBasedLibrary.CascadingCoordComparer">
	<summary>
 Rappresenta un comparatore a cascata che utilizza più comparatori
 </summary>
</member><member name="F:GridBasedLibrary.DiagonalDistanceFunction.DF">
	<summary>
 Ottiene o imposta una istanza di DistanceFunction
 </summary>
</member><member name="P:GridBasedLibrary.DiagonalDistanceFunction.DistanceFunction">
	<summary>
 Ottiene la funzione per il calcolo della distanza
 </summary>
	<value>La funzione per il calcolo della distanza</value>
	<returns>La funzione per il calcolo della distanza</returns>
</member><member name="M:GridBasedLibrary.DiagonalDistanceFunction.#ctor">
	<summary>
 Crea una nuova istanza di DiagonalDistanceFunction
 </summary>
</member><member name="M:GridBasedLibrary.DiagonalDistanceFunction.GetDistance(System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
	<summary>
 Calcola la distanza tra 1 e 2
 </summary>
	<param name="x1">Cordinata x del punto 1</param>
	<param name="y1">Cordinata y del punto 1</param>
	<param name="x2">Cordinata x del punto 2</param>
	<param name="y2">Cordinata y del punto 2</param>
	<param name="scale">Valore di scala</param>
	<returns>Un valore che indica la distanza (euristica) tra punto 1 e 2</returns>
</member><member name="M:GridBasedLibrary.DiagonalDistanceFunction.GetDistance(GridBasedLibrary.ILocated,GridBasedLibrary.ILocated,System.Single)">
	<summary>
 Calcola la distanza tra 1 e 2
 </summary>
	<param name="c1">Cordinata 1</param>
	<param name="c2">Cordinata 2</param>
	<param name="scale">Valore di scala</param>
	<returns>Un valore che indica la distanza (euristica) tra punto 1 e 2</returns>
</member><member name="T:GridBasedLibrary.DiagonalDistanceFunction">
	<summary>
 Rappresenta la funzione euristica che calcola la distanza tra 2 punti utilizzando l'algoritmo di Chebyshev
 </summary>
</member><member name="F:GridBasedLibrary.Located.X">
	<summary>
 Cordinata X
 </summary>
</member><member name="F:GridBasedLibrary.Located.Y">
	<summary>
 Cordinata Y
 </summary>
</member><member name="M:GridBasedLibrary.Located.GetX">
	<summary>
 Ottiene la cordinata X
 </summary>
	<returns>Cordinata X</returns>
</member><member name="M:GridBasedLibrary.Located.GetY">
	<summary>
 Ottiene la cordinata Y
 </summary>
	<returns>Cordinata Y</returns>
</member><member name="M:GridBasedLibrary.Located.GetLocation">
	<summary>
 Ottiene la locazione in coord
 </summary>
	<returns>La locazione</returns>
</member><member name="M:GridBasedLibrary.Located.GetLocationValue">
	<summary>
 Ottiene il valore di localizzazione
 </summary>
	<returns>Valore espresso in |--32bit--X--|--32bit--Y--|</returns>
	<remarks>E' utile solo nelle operazioni di serializzazione/deserializzazione</remarks>
</member><member name="M:GridBasedLibrary.Located.GetUp">
	<summary>
 Ottiene la cordinata in alto
 </summary>
	<returns>Cordinata (x,y-1)</returns>
</member><member name="M:GridBasedLibrary.Located.GetRightUp">
	<summary>
 Ottiene la cordinata in alto a destra
 </summary>
	<returns>Cordinata (x+1,y-1)</returns>
</member><member name="M:GridBasedLibrary.Located.GetRight">
	<summary>
 Ottiene la cordinata a destra
 </summary>
	<returns>Cordinata (x+1,y)</returns>
</member><member name="M:GridBasedLibrary.Located.GetRightDown">
	<summary>
 Ottiene la cordinata in basso a destra
 </summary>
	<returns>Cordinata (x+1,y+1)</returns>
</member><member name="M:GridBasedLibrary.Located.GetDown">
	<summary>
 Ottiene la cordinata in basso
 </summary>
	<returns>Cordinata (x,y+1)</returns>
</member><member name="M:GridBasedLibrary.Located.GetLeftDown">
	<summary>
 Ottiene la cordinata in basso a sinistra
 </summary>
	<returns>Cordinata (x-1,y+1)</returns>
</member><member name="M:GridBasedLibrary.Located.GetLeft">
	<summary>
 Ottiene la cordinata a sinistra
 </summary>
	<returns>Cordinata (x-1,y)</returns>
</member><member name="M:GridBasedLibrary.Located.GetLeftUp">
	<summary>
 Ottiene la cordinata in alto a sinistra
 </summary>
	<returns>Cordinata (x-1,y-1)</returns>
</member><member name="M:GridBasedLibrary.Located.GetUp(System.Int32)">
	<summary>
 Ottiene la cordinata in alto
 </summary>
	<param name="offset">Offset</param>
	<returns>Cordinata (x,y-o)</returns>
</member><member name="M:GridBasedLibrary.Located.GetRightUp(System.Int32)">
	<summary>
 Ottiene la cordinata in alto a destra
 </summary>
	<param name="offset">Offset</param>
	<returns>Cordinata (x+o,y-o)</returns>
</member><member name="M:GridBasedLibrary.Located.GetRight(System.Int32)">
	<summary>
 Ottiene la cordinata a destra
 </summary>
	<param name="offset">Offset</param>
	<returns>Cordinata (x+o,y)</returns>
</member><member name="M:GridBasedLibrary.Located.GetRightDown(System.Int32)">
	<summary>
 Ottiene la cordinata in basso a destra
 </summary>
	<param name="offset">Offset</param>
	<returns>Cordinata (x+o,y+o)</returns>
</member><member name="M:GridBasedLibrary.Located.GetDown(System.Int32)">
	<summary>
 Ottiene la cordinata in basso
 </summary>
	<param name="offset">Offset</param>
	<returns>Cordinata (x,y+o)</returns>
</member><member name="M:GridBasedLibrary.Located.GetLeftDown(System.Int32)">
	<summary>
 Ottiene la cordinata in basso a sinistra
 </summary>
	<param name="offset">Offset</param>
	<returns>Cordinata (x-o,y+o)</returns>
</member><member name="M:GridBasedLibrary.Located.GetLeft(System.Int32)">
	<summary>
 Ottiene la cordinata a sinistra
 </summary>
	<param name="offset">Offset</param>
	<returns>Cordinata (x-o,y)</returns>
</member><member name="M:GridBasedLibrary.Located.GetLeftUp(System.Int32)">
	<summary>
 Ottiene la cordinata in alto a sinistra
 </summary>
	<param name="offset">Offset</param>
	<returns>Cordinata (x-o,y-o)</returns>
</member><member name="M:GridBasedLibrary.Located.GetCoordByDirection(GridBasedLibrary.Direction)">
	<summary>
 Ottiene la cordinata in base alla <paramref name="direction">direzione</paramref>
	</summary>
	<param name="direction">Direzione</param>
	<returns>(x+CoeDirX, y+CoeDirY)</returns>
</member><member name="M:GridBasedLibrary.Located.GetCoordByDirection(GridBasedLibrary.Direction,System.Int32)">
	<summary>
 Ottiene la cordinata in base alla <paramref name="direction">direzione</paramref>
	</summary>
	<param name="direction">Direzione</param>
	<param name="offset">Offset</param>
	<returns>(x+CoeDirX*offset, y+CoeDirY*offset)</returns>
</member><member name="M:GridBasedLibrary.Located.GetCoordByOffset(System.Int32,System.Int32)">
	<summary>
 Ottiene la cordinata in base all' offset
 </summary>
	<param name="offx">Offset X</param>
	<param name="offy">Offset Y</param>
	<returns>Cordinata</returns>
</member><member name="T:GridBasedLibrary.Located">
	<summary>
 Rappresenta un oggetto localizzato
 </summary>
</member><member name="P:GridBasedLibrary.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:GridBasedLibrary.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:GridBasedLibrary.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:GridBasedLibrary.MSRandomGenerator.NextInt">
	<summary>
 Genera un numero intero casuale compreso tra 0 e int.maxvalue
 </summary>
	<returns>Intero casuale compreso tra 0 e int.maxvalue</returns>
</member><member name="M:GridBasedLibrary.MSRandomGenerator.NextInt(System.Int32)">
	<summary>
 Genera un numero intero casuale compreso tra 0 e Max
 </summary>
	<returns>Intero casuale compreso tra 0 e max</returns>
</member><member name="M:GridBasedLibrary.MSRandomGenerator.NextInt(System.Int32,System.Int32)">
	<summary>
 Genera un numero intero casuale compreso tra Min e Max
 </summary>
	<returns>Intero casuale compreso tra Min e Max</returns>
</member><member name="M:GridBasedLibrary.MSRandomGenerator.NextSingle">
	<summary>
 Genera un numero single casuale compreso tra 0 e 1
 </summary>
	<returns>Single casuale compreso tra 0 e 1</returns>
</member><member name="M:GridBasedLibrary.MSRandomGenerator.NextDouble">
	<summary>
 Genera un numero double casuale compreso tra 0 e 1
 </summary>
	<returns>Double casuale compreso tra 0 e 1</returns>
</member><member name="M:GridBasedLibrary.MSRandomGenerator.NextItem``1(System.Collections.Generic.IEnumerable{``0})">
	<summary>
 Estrae un elemento casuale dalla lista
 </summary>
	<typeparam name="T">Tipo di elemento</typeparam>
	<param name="coll">Collezione di origine</param>
	<returns>Un elemento casuale</returns>
</member><member name="T:GridBasedLibrary.MSRandomGenerator">
	<summary>
 Rappresenta un generatore di numeri casuali che utilizza l'algoritmo della class System.Random
 </summary>
	<remarks></remarks>
</member><member name="F:GridBasedLibrary.HSMapClientWithScreen.ScreenC">
	<summary>
 Cordinate dello screen
 </summary>
</member><member name="F:GridBasedLibrary.HSMapClientWithScreen.screenSize">
	<summary>
 Ottiene o imposta le dimensioni dello screen
 </summary>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.#ctor(System.Int32,System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="x">Cordinata X</param>
	<param name="y">Cordinata Y</param>
	<param name="width">Larghezza della mappa</param>
	<param name="height">Altezza della mappa</param>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.#ctor(System.Int32,System.Int32,System.UInt32,System.UInt32,GridBasedLibrary.ITile,System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="x">Cordinata X</param>
	<param name="y">Cordinata Y</param>
	<param name="width">Larghezza della mappa</param>
	<param name="height">Altezza della mappa</param>
	<param name="defaultTile">Tile di default</param>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.#ctor(GridBasedLibrary.Coord,GridBasedLibrary.Size,GridBasedLibrary.Coord,GridBasedLibrary.Size)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="c">Cordinata della mappa</param>
	<param name="size">Dimensioni della mappa</param>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.#ctor(GridBasedLibrary.Coord,GridBasedLibrary.Size,GridBasedLibrary.ITile,GridBasedLibrary.Coord,GridBasedLibrary.Size)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="c">Cordinata della mappa</param>
	<param name="size">Dimensioni della mappa</param>
	<param name="defaultTile">Tile di default</param>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.#ctor(GridBasedLibrary.ILocated,GridBasedLibrary.Size,GridBasedLibrary.ILocated,GridBasedLibrary.Size)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="c">Cordinata della mappa</param>
	<param name="size">Dimensioni della mappa</param>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.#ctor(GridBasedLibrary.ILocated,GridBasedLibrary.Size,GridBasedLibrary.ITile,GridBasedLibrary.ILocated,GridBasedLibrary.Size)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="c">Cordinata della mappa</param>
	<param name="size">Dimensioni della mappa</param>
	<param name="defaultTile">Tile di default</param>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.#ctor(GridBasedLibrary.Rectangle,GridBasedLibrary.Rectangle)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="reg">Regione della mappa</param>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.#ctor(GridBasedLibrary.Rectangle,GridBasedLibrary.ITile,GridBasedLibrary.Rectangle)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="reg">Regione della mappa</param>
	<param name="defaultTile">Tile di default</param>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.CreateHSMapClientWithScreen(System.Int32,System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="x">Cordinata X</param>
	<param name="y">Cordinata Y</param>
	<param name="width">Larghezza della mappa</param>
	<param name="height">Altezza della mappa</param>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.CreateHSMapClientWithScreen(System.Int32,System.Int32,System.UInt32,System.UInt32,GridBasedLibrary.ITile,System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="x">Cordinata X</param>
	<param name="y">Cordinata Y</param>
	<param name="width">Larghezza della mappa</param>
	<param name="height">Altezza della mappa</param>
	<param name="defaultTile">Tile di default</param>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.CreateHSMapClientWithScreen(GridBasedLibrary.Coord,GridBasedLibrary.Size,GridBasedLibrary.Coord,GridBasedLibrary.Size)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="c">Cordinata della mappa</param>
	<param name="size">Dimensioni della mappa</param>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.CreateHSMapClientWithScreen(GridBasedLibrary.Coord,GridBasedLibrary.Size,GridBasedLibrary.ITile,GridBasedLibrary.Coord,GridBasedLibrary.Size)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="c">Cordinata della mappa</param>
	<param name="size">Dimensioni della mappa</param>
	<param name="defaultTile">Tile di default</param>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.CreateHSMapClientWithScreen(GridBasedLibrary.ILocated,GridBasedLibrary.Size,GridBasedLibrary.ILocated,GridBasedLibrary.Size)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="c">Cordinata della mappa</param>
	<param name="size">Dimensioni della mappa</param>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.CreateHSMapClientWithScreen(GridBasedLibrary.ILocated,GridBasedLibrary.Size,GridBasedLibrary.ITile,GridBasedLibrary.ILocated,GridBasedLibrary.Size)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="c">Cordinata della mappa</param>
	<param name="size">Dimensioni della mappa</param>
	<param name="defaultTile">Tile di default</param>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.CreateHSMapClientWithScreen(GridBasedLibrary.Rectangle,GridBasedLibrary.Rectangle)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="reg">Regione della mappa</param>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.CreateHSMapClientWithScreen(GridBasedLibrary.Rectangle,GridBasedLibrary.ITile,GridBasedLibrary.Rectangle)">
	<summary>
 Crea una nuova istanza di HSMap
 </summary>
	<param name="reg">Regione della mappa</param>
	<param name="defaultTile">Tile di default</param>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.GetScreenWidth">
	<summary>
 Ottiene la larghezza dello screen
 </summary>
	<returns>La larghezza</returns>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.GetScreenHeight">
	<summary>
 Ottiene l'altezza dello screen
 </summary>
	<returns>L'altezza</returns>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.GetScreenSizeValue">
	<summary>
 Ottiene il valore di size usato nelle serializzazioni
 </summary>
	<returns>Il valore di size</returns>
	<remarks>E' usato solo nelle serializzazioni</remarks>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.GetScreenCoordByDirection(GridBasedLibrary.Direction)">
	<summary>
 Ottiene la  cordinata spostata di 1 da direction
 </summary>
	<param name="direction">Direzione</param>
	<returns>Cordinata spostata di 1</returns>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.GetScreenCoordByDirection(GridBasedLibrary.Direction,System.Int32)">
	<summary>
 Ottiene la  cordinata spostata di 1 da direction
 </summary>
	<param name="direction">Direzione</param>
	<param name="offset">Offset</param>
	<returns>Cordinata spostata di 1</returns>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.GetScreenCoordByOffset(System.Int32,System.Int32)">
	<summary>
 Ottiene la  cordinata spostata di offx e offy
 </summary>
	<param name="offx">Offset X</param>
	<param name="offy">Offset Y</param>
	<returns>Cordinata spostata di 1</returns>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.GetScreenDown">
	<summary>
 Ottiene la cordinata spostata di 1 verso giù
 </summary>
	<returns>Cordinata spostata di 1 verso giù</returns>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.GetScreenDown(System.Int32)">
	<summary>
 Ottiene la cordinata spostata di off verso giù
 </summary>
	<param name="offset">Offset di spostamento</param>
	<returns>Cordinata spostata di 1 verso giù</returns>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.GetScreenLeft">
	<summary>
 Ottiene la cordinata spostata di 1 verso sx
 </summary>
	<returns>Cordinata spostata di 1 verso sx</returns>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.GetScreenLeft(System.Int32)">
	<summary>
 Ottiene la cordinata spostata di off verso sx
 </summary>
	<param name="offset">Offset di spostamento</param>
	<returns>Cordinata spostata di off verso sx</returns>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.GetScreenLeftDown">
	<summary>
 Ottiene la cordinata spostata di 1 verso sx-giù
 </summary>
	<returns>Cordinata spostata di 1 verso sx-giù</returns>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.GetScreenLeftDown(System.Int32)">
	<summary>
 Ottiene la cordinata spostata di off verso sx-giù
 </summary>
	<param name="offset">Offset di spostamento</param>
	<returns>Cordinata spostata di off verso sx-giù</returns>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.GetScreenLeftUp">
	<summary>
 Ottiene la cordinata spostata di 1 verso sx-su
 </summary>
	<returns>Cordinata spostata di 1 verso sx-su</returns>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.GetScreenLeftUp(System.Int32)">
	<summary>
 Ottiene la cordinata spostata di off verso sx-su
 </summary>
	<param name="offset">Offset di spostamento</param>
	<returns>Cordinata spostata di off verso sx-su</returns>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.GetScreenRight">
	<summary>
 Ottiene la cordinata spostata di 1 verso dx
 </summary>
	<returns>Cordinata spostata di 1 verso dx</returns>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.GetScreenRight(System.Int32)">
	<summary>
 Ottiene la cordinata spostata di off verso dx
 </summary>
	<param name="offset">Offset di spostamento</param>
	<returns>Cordinata spostata di off verso dx</returns>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.GetScreenRightDown">
	<summary>
 Ottiene la cordinata spostata di 1 verso dx-giù
 </summary>
	<returns>Cordinata spostata di 1 verso dx-giù</returns>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.GetScreenRightDown(System.Int32)">
	<summary>
 Ottiene la cordinata spostata di off verso dx-giù
 </summary>
	<param name="offset">Offset di spostamento</param>
	<returns>Cordinata spostata di off verso dx-giù</returns>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.GetRightUp">
	<summary>
 Ottiene la cordinata spostata di 1 verso dx-su
 </summary>
	<returns>Cordinata spostata di 1 verso dx-su</returns>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.GetScreenRightUp(System.Int32)">
	<summary>
 Ottiene la cordinata spostata di off verso dx-su
 </summary>
	<param name="offset">Offset di spostamento</param>
	<returns>Cordinata spostata di off verso dx-su</returns>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.GetScreenUp">
	<summary>
 Ottiene la cordinata spostata di 1 verso su
 </summary>
	<returns>Cordinata spostata di 1 verso su</returns>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.GetScreenUp(System.Int32)">
	<summary>
 Ottiene la cordinata spostata di off verso su
 </summary>
	<returns>Cordinata spostata di off verso su</returns>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.GetScreenX">
	<summary>
 Restituisce la cordinata X
 </summary>
	<returns>Cordinata X</returns>
	<remarks></remarks>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.GetScreenY">
	<summary>
 Restituisce la cordinata y
 </summary>
	<returns>Cordinata Y</returns>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.GetScreenLocation">
	<summary>
 Restituisce la locazione dello screen
 </summary>
	<returns>La Locazione dello screen</returns>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.GetScreenLocationValue">
	<summary>
 Restituisce il valore della locazione dello screen
 </summary>
	<returns>Il valore della Locazione dello screen</returns>
	<remarks>è utile solamente nella serializzazione</remarks>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.MoveScreenByDirection(GridBasedLibrary.Direction)">
	<summary>
 Sposta lo screen verso direzione di 1
 </summary>
	<param name="direction">Direzione di spostamento</param>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.MoveScreenByDirection(GridBasedLibrary.Direction,System.Int32)">
	<summary>
 Sposta lo screen verso direzione di 1
 </summary>
	<param name="direction">Direzione di spostamento</param>
	<param name="offset">Offset di spostamento</param>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.MoveScreenByOffset(System.Int32,System.Int32)">
	<summary>
 Sposta lo screen di offx e offy
 </summary>
	<param name="offx">Offset X</param>
	<param name="offy">Offset Y</param>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.MoveScreenDown">
	<summary>
 Sposta lo screen verso giù
 </summary>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.MoveScreenDown(System.Int32)">
	<summary>
 Sposta lo screen verso giù di off
 </summary>
	<param name="offset">Offset di spostamento</param>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.MoveScreenLeft">
	<summary>
 Sposta lo screen verso sx
 </summary>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.MoveScreenLeft(System.Int32)">
	<summary>
 Sposta lo screen verso sx di off
 </summary>
	<param name="offset">Offset di spostamento</param>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.MoveScreenLeftDown">
	<summary>
 Sposta lo screen verso sx-giù
 </summary>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.MoveScreenLeftDown(System.Int32)">
	<summary>
 Sposta lo screen verso sx-giù di offset
 </summary>
	<param name="offset">Offset di spostamento</param>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.MoveScreenLeftUp">
	<summary>
 Sposta lo screen verso sx-su
 </summary>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.MoveScreenLeftUp(System.Int32)">
	<summary>
 Sposta lo screen verso sx-su di off
 </summary>
	<param name="offset">Offset di spostamento</param>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.MoveScreenRight">
	<summary>
 Sposta lo screen verso dx
 </summary>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.MoveScreenRight(System.Int32)">
	<summary>
 Sposta lo screen verso dx di off
 </summary>
	<param name="offset">Offset di spostamento</param>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.MoveScreenRightDown">
	<summary>
 Sposta lo screen verso dx-giù
 </summary>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.MoveScreenRightDown(System.Int32)">
	<summary>
 Sposta lo screen verso dx-giù di off
 </summary>
	<param name="offset">Offset di spostamento</param>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.MoveScreenRightUp">
	<summary>
 Sposta lo screen verso dx-su
 </summary>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.MoveScreenRightUp(System.Int32)">
	<summary>
 Sposta lo screen verso dx-su di off
 </summary>
	<param name="offset">Offset di spostamento</param>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.MoveScreenUp">
	<summary>
 Sposta lo screen verso su
 </summary>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.MoveScreenUp(System.Int32)">
	<summary>
 Sposta lo screen verso su
 </summary>
	<param name="offset">Offset di spostamento</param>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.MoveScreenTo(GridBasedLibrary.ILocated)">
	<summary>
 Sposta lo screen verso dest
 </summary>
	<param name="dest">destinazione di spostamento</param>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.MoveScreenTo(System.Int32,System.Int32)">
	<summary>
 Sposta lo screen verso dest
 </summary>
	<param name="destX">Cordinata X di spostamento</param>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.SetScreenLocation(GridBasedLibrary.ILocated)">
	<summary>
 Imposta la cordinata 
 </summary>
	<param name="c">Cordinata da impostare</param>
	<remarks>Sono simili a moveTo() ma non effetuano controllo sui bordi</remarks>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.SetScreenLocation(System.Int32,System.Int32)">
	<summary>
 Imposta la cordinata 
 </summary>
	<param name="x">Cordinata X</param>
	<param name="y">Cordinata Y</param>
	<remarks>Sono simili a moveTo() ma non effetuano controllo sui bordi</remarks>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.SetScreenX(System.Int32)">
	<summary>
 Imposta la cordinata X
 </summary>
	<param name="value">Nuova cordinata X</param>
	<remarks>Come la famiglia [Set]() non effettuano alcuno controlli sui bordi</remarks>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.SetScreenY(System.Int32)">
	<summary>
 Imposta la cordinata Y
 </summary>
	<param name="value">Nuova cordinata Y</param>
	<remarks>Come la famiglia [Set]() non effettuano alcuno controlli sui bordi</remarks>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.CanRenderUpdate(GridBasedLibrary.ILocated)">
	<summary>
 Verifica che è da re-renderizzare la cordinata 
 </summary>
	<param name="c">Cordinata da verificare</param>
	<returns>True se deve essere re-renderizzata</returns>
	<remarks>Gli offset dello screen vengono scalati automaticamente</remarks>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.CanRenderUpdate(System.Int32,System.Int32)">
	<summary>
 Verifica che è da re-renderizzare la cordinata 
 </summary>
	<param name="x">Cordinata x</param>
	<param name="y">Cordinata y</param>
	<returns>True se deve essere re-renderizzata</returns>
	<remarks>Gli offset dello screen vengono scalati automaticamente</remarks>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.SetRenderFlag(GridBasedLibrary.ILocated)">
	<summary>
 Imposta la renderflag al tile
 </summary>
	<param name="c">Cordinata di cui impostare la renderflag</param>
	<remarks>Gli offset dello screen vengono scalati automaticamente</remarks>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.SetRenderFlag(System.Int32,System.Int32)">
	<summary>
 Imposta la renderflag al tile
 </summary>
	<param name="x">Cordinata X di cui impostare la renderflag</param>
	<param name="y">Cordinata Y di cui impostare la renderflag</param>
	<remarks>Gli offset dello screen vengono scalati automaticamente</remarks>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.RemoveRenderFlag(GridBasedLibrary.ILocated)">
	<summary>
 Rimuove la renderflag al tile
 </summary>
	<param name="c">Cordinata di cui rimuovere la renderflag</param>
	<remarks>Gli offset dello screen vengono scalati automaticamente</remarks>
</member><member name="M:GridBasedLibrary.HSMapClientWithScreen.RemoveRenderFlag(System.Int32,System.Int32)">
	<summary>
 Rimuove la renderflag al tile
 </summary>
	<param name="x">Cordinata X di cui rimuovere la renderflag</param>
	<param name="y">Cordinata Y di cui rimuovere la renderflag</param>
	<remarks>Gli offset dello screen vengono scalati automaticamente</remarks>
</member><member name="T:GridBasedLibrary.HSMapClientWithScreen">
	<summary>
 Rappresenta un mapclient con uno schermo
 </summary>
</member><member name="F:GridBasedLibrary.HSTile.name">
	<summary>
 Ottiene o imposta il nome del tile
 </summary>
</member><member name="F:GridBasedLibrary.HSTile.static">
	<summary>
 Ottiene o imposta un valore booleano che indica se è condiviso o no
 </summary>
</member><member name="M:GridBasedLibrary.HSTile.#ctor(System.String,System.Boolean)">
	<summary>
 Crea una nuova istanza di HSTile
 </summary>
	<param name="name">Nome da usare</param>
</member><member name="M:GridBasedLibrary.HSTile.GetCopy">
	<summary>
 Restituisce una copia di se stesso
 </summary>
	<returns>Una copia di se stesso</returns>
</member><member name="M:GridBasedLibrary.HSTile.GetIstance">
	<summary>
 Restituisce una copia di se stesso se non è statico oppure se stesso
 </summary>
	<returns>Se statico restituisce se stesso, invece se non statico una copia</returns>
	<remarks></remarks>
</member><member name="M:GridBasedLibrary.HSTile.IsStatic">
	<summary>
 Restituisce true se è condiviso
 </summary>
	<returns>True se è condiviso</returns>
</member><member name="M:GridBasedLibrary.HSTile.GetScoreForPathFinder(GridBasedLibrary.IActor)">
	<summary>
 Restituisce il punteggio usato dai pathFinder
 </summary>
	<param name="act">Il punteggio può variare per l'attore</param>
	<returns>Il punteggio</returns>
	<remarks>Il punteggio potrebbe dipendere dall' attore</remarks>
</member><member name="M:GridBasedLibrary.HSTile.GetName">
	<summary>
 Ottiene il nome assegnato al tile
 </summary>
	<returns>Il nome</returns>
</member><member name="M:GridBasedLibrary.HSTile.Init(GridBasedLibrary.IMapTile)">
	<summary>
 Inizializza il tile con il maptile di riferimento
 </summary>
	<param name="ref">MapTile di riferimento</param>
</member><member name="M:GridBasedLibrary.HSTile.Update(GridBasedLibrary.IMapTile)">
	<summary>
 Aggiorna il tile
 </summary>
	<param name="ref">MapTile di riferimento</param>
</member><member name="M:GridBasedLibrary.HSTile.IsEqual(GridBasedLibrary.ITile)">
	<summary>
 Verifica che i 2 tile sono uguali o no
 </summary>
	<param name="tile2">Secondo tile</param>
	<returns>True se sono uguali, altrimenti false</returns>
</member><member name="M:GridBasedLibrary.HSTile.IsRenderEqual(GridBasedLibrary.ITile)">
	<summary>
 Restituisce true se sono uguali dal punto di vista grafico
 </summary>
	<param name="tile2">Secondo tile</param>
	<returns>True se sono uguali dal punto di vista grafico</returns>
</member><member name="E:GridBasedLibrary.HSTile.ActorEntered">
	<summary>
 Evento che si verifica quando un attore è entrato
 </summary>
	<param name="act">Attore che è entrato</param>
	<param name="from">MapTile di partenza</param>
	<param name="dest">MapTile di destinazione</param>
</member><member name="E:GridBasedLibrary.HSTile.ActorEntering">
	<summary>
 Evento che si verifica quando un attore sta per entrare in questo tile
 </summary>
	<param name="act">Attore che sta per entrare</param>
	<param name="cancel">True se cancellare l'evento</param>
	<param name="from">MapTile di partenza</param>
	<param name="dest">MapTile di destinazione</param>
</member><member name="M:GridBasedLibrary.HSTile.OnActorEntered(GridBasedLibrary.IActor,GridBasedLibrary.IMapTile,GridBasedLibrary.IMapTile)">
	<summary>
 Lancia l'evento che si verifica quando un attore è entrato in questo tile
 </summary>
	<param name="act">Attore che ha compiuto l'azione</param>
	<param name="from">TileMap di origine</param>
	<param name="dest">MapTile di destinazione</param>
</member><member name="M:GridBasedLibrary.HSTile.OnActorEntering(GridBasedLibrary.IActor,GridBasedLibrary.IMapTile,GridBasedLibrary.IMapTile)">
	<summary>
 Lancia l'evento che si verifica quando un attore sta per entrare in questo tile
 </summary>
	<param name="act">Attore che si spostato</param>
	<param name="dest">MapTile di destinazione</param>
	<returns>True se è stato rifiutato</returns>
</member><member name="E:GridBasedLibrary.HSTile.ActorLeaving">
	<summary>
 Evento che si verifica quando un attore sta per lasciare questo tile
 </summary>
	<param name="act">Attore che sta per entrare</param>
	<param name="cancel">True se cancellare l'evento</param>
	<param name="from">MapTile di partenza</param>
	<param name="dest">MapTile di destinazione</param>
</member><member name="E:GridBasedLibrary.HSTile.ActorLeaved">
	<summary>
 Evento che si verifica quando un attore ha lasciato questo tile
 </summary>
	<param name="act">Attore che è entrato</param>
	<param name="from">MapTile di partenza</param>
	<param name="dest">MapTile di destinazione</param>
</member><member name="M:GridBasedLibrary.HSTile.OnActorLeaving(GridBasedLibrary.IActor,GridBasedLibrary.IMapTile,GridBasedLibrary.IMapTile)">
	<summary>
 Lancia l'evento che si verifica quando un attore sta per lasciare questo tile
 </summary>
	<param name="act">Attore che si spostato</param>
	<param name="dest">MapTile di destinazione</param>
	<returns>True se è stato rifiutato</returns>
</member><member name="M:GridBasedLibrary.HSTile.OnActorLeaved(GridBasedLibrary.IActor,GridBasedLibrary.IMapTile,GridBasedLibrary.IMapTile)">
	<summary>
 Lancia l'evento che si verifica quando un attore ha lasciato questo tile
 </summary>
	<param name="act">Attore che ha compiuto l'azione</param>
	<param name="from">TileMap di origine</param>
	<param name="dest">MapTile di destinazione</param>
</member><member name="M:GridBasedLibrary.HSTile.CanActorEnter(GridBasedLibrary.IActor)">
	<summary>
 Restituisce true se l'attore può entrare nel tile
 </summary>
	<param name="act">Attore da verificare</param>
	<returns>True se può entrare</returns>
</member><member name="T:GridBasedLibrary.HSTile">
	<summary>
 Rappresenta un tile generico
 </summary>
	<remarks>Utilizza un algoritmo preferenziale per la velocità</remarks>
</member><member name="F:GridBasedLibrary.Direction.NONE">
	<summary>
 Rappresenta la direzione nulla
 </summary>
	<remarks>kx=0 ky=0 (x,y)</remarks>
</member><member name="F:GridBasedLibrary.Direction.UP">
	<summary>
 Rappresenta la direzione sopra
 </summary>
	<remarks>kx=0 ky=-1 (x,y-o)</remarks>
</member><member name="F:GridBasedLibrary.Direction.RIGHT_UP">
	<summary>
 Rappresenta la direzione sopra a dx
 </summary>
	<remarks>kx=1 ky=-1 (x+o,y-o)</remarks>
</member><member name="F:GridBasedLibrary.Direction.RIGHT">
	<summary>
 Rappresenta la direzione dx
 </summary>
	<remarks>kx=1 ky=0 (x+o,y)</remarks>
</member><member name="F:GridBasedLibrary.Direction.RIGHT_DOWN">
	<summary>
 Rappresenta la direzione sotto a dx
 </summary>
	<remarks>kx=1 ky=1 (x+o,y+o)</remarks>
</member><member name="F:GridBasedLibrary.Direction.DOWN">
	<summary>
 Rappresenta la direzione sotto
 </summary>
	<remarks>kx=0 ky=+1 (x,y+o)</remarks>
</member><member name="F:GridBasedLibrary.Direction.LEFT_DOWN">
	<summary>
 Rappresenta la direzione sotto a sx
 </summary>
	<remarks>kx=-1 ky=1 (x-o,y+o)</remarks>
</member><member name="F:GridBasedLibrary.Direction.LEFT">
	<summary>
 Rappresenta la direzione sx
 </summary>
	<remarks>kx=-1 ky=0 (x-o,y)</remarks>
</member><member name="F:GridBasedLibrary.Direction.LEFT_UP">
	<summary>
 Rappresenta la direzione sopra a sx
 </summary>
	<remarks>kx=-1 ky=-1 (x-o,y-o)</remarks>
</member><member name="M:GridBasedLibrary.Direction.#ctor(System.Byte)">
	<summary>
 Crea una nuova istanza di Direction
 </summary>
	<param name="value">Valore di direzione</param>
</member><member name="M:GridBasedLibrary.Direction.#ctor(GridBasedLibrary.Direction)">
	<summary>
 Crea una nuova istanza di Direction
 </summary>
	<param name="source">Direzione originaria</param>
</member><member name="M:GridBasedLibrary.Direction.#ctor(GridBasedLibrary.coefficientDirection,GridBasedLibrary.coefficientDirection)">
	<summary>
 Crea una nuova istanza di Direction
 </summary>
	<param name="coeX">Coefficiente X</param>
	<param name="coeY">Coefficiente Y</param>
</member><member name="M:GridBasedLibrary.Direction.Opposite">
	<summary>
 Restituisce la direzione opposta a questa direzione
 </summary>
	<returns>Direzione opposta</returns>
</member><member name="M:GridBasedLibrary.Direction.GetCoefficientX">
	<summary>
 Ottiene il coefficente X
 </summary>
	<returns>Coefficente X</returns>
</member><member name="M:GridBasedLibrary.Direction.GetCoefficientY">
	<summary>
 Ottiene il coefficente Y
 </summary>
	<returns>Coefficente Y</returns>
</member><member name="M:GridBasedLibrary.Direction.SetDirection(System.Byte)">
	<summary>
 Imposta la direzione in vase a value
 </summary>
	<param name="value">Valore della direzione</param>
</member><member name="M:GridBasedLibrary.Direction.SetDirection(GridBasedLibrary.Direction)">
	<summary>
 Imposta la direzione in vase a source
 </summary>
	<param name="source">Direzione originaria</param>
</member><member name="M:GridBasedLibrary.Direction.SetDirection(GridBasedLibrary.coefficientDirection,GridBasedLibrary.coefficientDirection)">
	<summary>
 Imposta la direzione in base ai coefficienti
 </summary>
	<param name="coeX">Coefficiente X</param>
	<param name="coeY">Coefficiente Y</param>
</member><member name="M:GridBasedLibrary.Direction.SetDirectionByCoefficientX(GridBasedLibrary.coefficientDirection)">
	<summary>
 Imposta la direzione in base a coeX
 </summary>
	<param name="coeX">Coefficiente X</param>
</member><member name="M:GridBasedLibrary.Direction.SetDirectionByCoefficientY(GridBasedLibrary.coefficientDirection)">
	<summary>
 Imposta la direzione in base a coeY
 </summary>
	<param name="coeY">Coefficiente Y</param>
</member><member name="M:GridBasedLibrary.Direction.CombineDirection(GridBasedLibrary.Direction,GridBasedLibrary.Direction)">
	<summary>
 Combina le direzioni
 </summary>
	<param name="dirA">Direzione A</param>
	<param name="dirB">Direzione B</param>
	<returns>Direzione combinata</returns>
</member><member name="M:GridBasedLibrary.Direction.CombineCoefficient(GridBasedLibrary.coefficientDirection,GridBasedLibrary.coefficientDirection)">
	<summary>
 Combina i 2 coefficienti
 </summary>
	<param name="coeA">Coefficiente A</param>
	<param name="coeB">Coefficiente B</param>
	<returns>Coefficiente combinato</returns>
</member><member name="M:GridBasedLibrary.Direction.GetRotate(System.Int32)">
	<summary>
 Ottiene la rotazione di n direzioni di 1
 </summary>
	<param name="n">Numero di rotazione</param>
	<returns>Direzione ruotata</returns>
	<remarks>è possibile specificare un n negativo, in questo caso sarà rotato antiorario</remarks>
</member><member name="T:GridBasedLibrary.Direction">
	<summary>
 Rappresenta una direzione
 </summary>
	<remarks>Supporta solo 9 direzioni(una NONE)</remarks>
</member><member name="F:GridBasedLibrary.mazeMode.CLEAN">
	<summary>
 Flag che indica di pulire la regione con muri
 </summary>
</member><member name="F:GridBasedLibrary.mazeMode.UP">
	<summary>
 Flag che indica di espandersi verso su
 </summary>
</member><member name="F:GridBasedLibrary.mazeMode.RIGHT_UP">
	<summary>
 Flag che indica di espandersi verso dx-sopra
 </summary>
</member><member name="F:GridBasedLibrary.mazeMode.RIGHT">
	<summary>
 Flag che indica di espandersi verso dx
 </summary>
</member><member name="F:GridBasedLibrary.mazeMode.RIGHT_DOWN">
	<summary>
 Flag che indica di espandersi verso dx-giù
 </summary>
</member><member name="F:GridBasedLibrary.mazeMode.DOWN">
	<summary>
 Flag che indica di espandersi verso giù
 </summary>
</member><member name="F:GridBasedLibrary.mazeMode.LEFT_DOWN">
	<summary>
 Flag che indica di espandersi verso sx-giù
 </summary>
</member><member name="F:GridBasedLibrary.mazeMode.LEFT">
	<summary>
 Flag che indica di espandersi verso sx
 </summary>
</member><member name="F:GridBasedLibrary.mazeMode.LEFT_UP">
	<summary>
 Flag che indica di espandersi verso sx-su
 </summary>
</member><member name="F:GridBasedLibrary.mazeMode.SQUARE">
	<summary>
 Flag che indica di espandersi verso le quattro direzioni
 </summary>
</member><member name="F:GridBasedLibrary.mazeMode.DIAGONAL">
	<summary>
 Flag che indica di espandersi verso le direzioni diagonali
 </summary>
</member><member name="F:GridBasedLibrary.mazeMode.STRICT">
	<summary>
 Flag che indica di espandersi in modo strict
 </summary>
</member><member name="T:GridBasedLibrary.mazeMode">
	<summary>
 Enum che rappresenta la modalità di espansione del labirinto
 </summary>
</member><member name="F:GridBasedLibrary.ListCoordSelecter.coordList">
	<summary>
 Ottiene o imposta la lista di elementi selezionati
 </summary>
</member><member name="M:GridBasedLibrary.ListCoordSelecter.#ctor">
	<summary>
 Crea una nuova istanza di ListCoordSelecter
 </summary>
</member><member name="M:GridBasedLibrary.ListCoordSelecter.Select(System.Int32,System.Int32)">
	<summary>
 Seleziona una cordinata
 </summary>
	<param name="x">Cordinata x</param>
	<param name="y">Cordinata y</param>
</member><member name="M:GridBasedLibrary.ListCoordSelecter.Select(GridBasedLibrary.ILocated)">
	<summary>
 Seleziona una cordinata
 </summary>
	<param name="c">Cordinata da selezionare</param>
</member><member name="M:GridBasedLibrary.ListCoordSelecter.DeSelect(System.Int32,System.Int32)">
	<summary>
 Deseleziona una cordinata
 </summary>
	<param name="x">Cordinata x</param>
	<param name="y">Cordinata y</param>
</member><member name="M:GridBasedLibrary.ListCoordSelecter.DeSelect(GridBasedLibrary.ILocated)">
	<summary>
 Deseleziona una cordinata
 </summary>
	<param name="c">Cordinata da deselezionare</param>
</member><member name="M:GridBasedLibrary.ListCoordSelecter.DeSelectAll">
	<summary>
 Deseleziona tutte le cordinate
 </summary>
</member><member name="M:GridBasedLibrary.ListCoordSelecter.IsSelected(System.Int32,System.Int32)">
	<summary>
 Verifica se è selezionata una cordinata
 </summary>
	<param name="x">Cordinata x</param>
	<param name="y">Cordinata y</param>
</member><member name="M:GridBasedLibrary.ListCoordSelecter.IsSelected(GridBasedLibrary.ILocated)">
	<summary>
 Verifica se è selezionata una cordinata
 </summary>
	<param name="c">Cordinata da verificare</param>
</member><member name="M:GridBasedLibrary.ListCoordSelecter.GetSelection">
	<summary>
 Ottiene le cordinate selezionate
 </summary>
	<returns>Cordinate selezionate</returns>
</member><member name="M:GridBasedLibrary.ListCoordSelecter.GetEnumerator">
	<summary>
 Restituisce l'enumeratore usato da questa classe
 </summary>
	<returns>Enumeratore usato</returns>
</member><member name="M:GridBasedLibrary.ListCoordSelecter.GetEnumerator1">
	<summary>
 Restituisce l'enumeratore usato da questa classe
 </summary>
	<returns>Enumeratore usato</returns>
</member><member name="F:GridBasedLibrary.ListCoordSelecter.ListCoordSelectionEnumerator.ListSelecter">
	<summary>
 Ottiene o imposta il selecter
 </summary>
</member><member name="F:GridBasedLibrary.ListCoordSelecter.ListCoordSelectionEnumerator.index">
	<summary>
 Ottiene o imposta l'indice corrente
 </summary>
</member><member name="M:GridBasedLibrary.ListCoordSelecter.ListCoordSelectionEnumerator.#ctor(GridBasedLibrary.ListCoordSelecter)">
	<summary>
 Crea una nuova istanza di ListCoordSelectionEnumerator
 </summary>
	<param name="Sel">Selecter</param>
</member><member name="P:GridBasedLibrary.ListCoordSelecter.ListCoordSelectionEnumerator.Current">
	<summary>
 Ottiene l'elemento corrente
 </summary>
	<value>Elemento corrente</value>
	<returns>Elemento corrente</returns>
</member><member name="P:GridBasedLibrary.ListCoordSelecter.ListCoordSelectionEnumerator.Current1">
	<summary>
 Ottiene l'elemento corrente
 </summary>
	<value>Elemento corrente</value>
	<returns>Elemento corrente</returns>
</member><member name="M:GridBasedLibrary.ListCoordSelecter.ListCoordSelectionEnumerator.MoveNext">
	<summary>
 Sposta in avanti la cordinata corrente
 </summary>
	<returns>True se è stato spostato con successo, altrimenti false</returns>
</member><member name="M:GridBasedLibrary.ListCoordSelecter.ListCoordSelectionEnumerator.Reset">
	<summary>
 Resetta la posizione di current
 </summary>
</member><member name="T:GridBasedLibrary.ListCoordSelecter.ListCoordSelectionEnumerator">
	<summary>
 Rappresenta un enumeratore usato da ListCoordSelecter
 </summary>
</member><member name="T:GridBasedLibrary.ListCoordSelecter">
	<summary>
 Rappresenta un selecter che utilizza un algoritmo con la lista
 </summary>
</member><member name="M:GridBasedLibrary.SizeableRange.#ctor(System.Int32,System.Int32)">
	<summary>
 Crea una nuova istanza di Range
 </summary>
	<param name="Min">Valore minimo</param>
	<param name="Max">Valore massimo</param>
</member><member name="M:GridBasedLibrary.SizeableRange.SetMin(System.Int32)">
	<summary>
 Imposta il valore minimo
 </summary>
	<param name="value">Valore da impostare</param>
</member><member name="M:GridBasedLibrary.SizeableRange.SetMax(System.Int32)">
	<summary>
 Imposta il valore massimo
 </summary>
	<param name="value">Valore da impostare</param>
</member><member name="M:GridBasedLibrary.SizeableRange.Set(System.Int32,System.Int32)">
	<summary>
 Imposta il valore minimo e massimo
 </summary>
	<param name="min">Il valore minimo</param>
	<param name="max">Il valore massimo</param>
</member><member name="M:GridBasedLibrary.SizeableRange.Set(GridBasedLibrary.IRange)">
	<summary>
 Imposta il valore minimo e massimo
 </summary>
	<param name="range">Range</param>
</member><member name="M:GridBasedLibrary.SizeableRange.Extend(System.Int32)">
	<summary>
 Il range viene esteso in entrambi limiti di offset
 </summary>
	<param name="Offset">Dimensioni di estensioni</param>
	<remarks>Viene esteso in entrambi i limiti in modo equo</remarks>
	<exception cref="T:System.OverflowException">Quando Max+Offset/2 sono maggiori di <see cref="T:System.Int32">Integer.MaxValue</see>
 oppure Min-offset/2 è minore di <see cref="T:System.Int32">Integer.MinValue</see></exception>
</member><member name="M:GridBasedLibrary.SizeableRange.Extend(System.Int32,System.Int32)">
	<summary>
 Il range viene esteso in entrambi limiti di offset
 </summary>
	<param name="LimitMinOffset">Estensione al limite inferiore</param>
	<param name="LimitMaxOffset">Estensione al limite superiore</param>
	<exception cref="T:System.OverflowException">Quando Max+Offset/2 sono maggiori di <see cref="T:System.Int32">Integer.MaxValue</see>
 oppure Min-offset/2 è minore di <see cref="T:System.Int32">Integer.MinValue</see></exception>
</member><member name="T:GridBasedLibrary.SizeableRange">
	<summary>
 Rappresenta un range in grado di essere ridimensionato
 </summary>
</member><member name="M:GridBasedLibrary.IPathFinder.Find(GridBasedLibrary.IActor,GridBasedLibrary.ILocated,GridBasedLibrary.ILocated,GridBasedLibrary.IMap)">
	<summary>
 Cerca il percorso da src a dest per l'attore act
 </summary>
	<param name="act">Attore</param>
	<param name="src">Punto iniziale</param>
	<param name="dest">Punto finale</param>
	<param name="map">Mappa di riferimento</param>
	<returns>Percorso</returns>
	<remarks>Questo metodo è utile maggiormente per attori ideali</remarks>
</member><member name="M:GridBasedLibrary.IPathFinder.Find(GridBasedLibrary.IActor,GridBasedLibrary.ILocated)">
	<summary>
 Cerca il percorso da src a dest per l'attore act
 </summary>
	<param name="act">Attore</param>
	<param name="dest">Punto finale</param>
	<returns>Percorso</returns>
	<remarks>Il punto iniziale è la posizione dell' attore</remarks>
</member><member name="M:GridBasedLibrary.IPathFinder.Find(GridBasedLibrary.IActor,System.Int32,System.Int32,System.Int32,System.Int32,GridBasedLibrary.IMap)">
	<summary>
 Cerca il percorso da src a dest per l'attore act
 </summary>
	<param name="act">Attore</param>
	<param name="destX">Cordinata X del punto finale</param>
	<param name="destY">Cordinata Y del punto finale</param>
	<param name="srcX">Cordinata X del punto iniziale</param>
	<param name="srcY">Cordinata Y del punto iniziale</param>
	<param name="map">Mappa di riferimento</param>
	<returns>Percorso</returns>
	<remarks>Questo metodo è utile maggiormente per attori ideali</remarks>
</member><member name="M:GridBasedLibrary.IPathFinder.Find(GridBasedLibrary.IActor,System.Int32,System.Int32)">
	<summary>
 Cerca il percorso da src a dest per l'attore act
 </summary>
	<param name="act">Attore</param>
	<param name="destX">Cordinata X del punto finale</param>
	<param name="destY">Cordinata Y del punto finale</param>
	<returns>Percorso</returns>
	<remarks>Il punto iniziale è la posizione dell' attore</remarks>
</member><member name="T:GridBasedLibrary.IPathFinder">
	<summary>
 Interfaccia di un path Finder
 </summary>
</member>
</members>
</doc>